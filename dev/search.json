[{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://fukayak.github.io/occumb/dev/articles/model_specification.html","id":"modeling-the-sequential-sampling-process-of-edna-metabarcoding","dir":"Articles","previous_headings":"","what":"Modeling the sequential sampling process of eDNA metabarcoding","title":"Model specification in occumb()","text":"assumed focal species monitored J sites sampled area interest. site j, K[j] replicates environmental samples collected. replicate, library prepared DNA sequencing obtain separate sequence reads. denote resulting sequence read count species replicate k site j obtained using high-throughput sequencing subsequent bioinformatics processing y[, j, k] (= 1, 2, ..., ; j = 1, 2, ..., J; k = 1, 2, ..., K[j]). figure shows diagram minimal model can fitted using occumb() default settings. process generating y represented series latent variables z, u, r, parameters psi, theta, phi govern variation latent variables. Although psi, theta, phi assumed species-specific values, modeling parameters functions covariates allows variation (see following section). right-pointing arrow left-hand side figure represents ecological process species distribution. DNA sequence species detected site, site must occupied species (.e., eDNA species must present site). model, site occupancy species indicated latent variable z[, j]. site j occupied species , z[, j] = 1; otherwise, z[, j] = 0. psi[] represents probability species occupies site selected region interest. Therefore, species high psi[] values occur many sites region, whereas low psi[] values occur limited number sites. Next, focus second right-pointing arrow left, represents one two observation processes: capture species DNA sequence. DNA sequence species detected, environmental sample occupied site sequencing library derived must contain species DNA sequence. model, inclusion DNA sequence species sequencing library indicated latent variable u[, j, k]. library replicate k site j contains DNA sequence species , u[, j, k] = 1; otherwise, u[, j, k] = 0. theta[] represents per-replicate probability DNA sequence species captured site occupied species. DNA sequences species high theta[] values reliably captured occupied sites, whereas species low theta[] values difficult capture. Note u[, j, k] always zero sites occupied species (.e., z[, j] = 0), assuming false positives occur. Finally, examine right-pointing arrow right-hand side figure. model part represents another observation process, , allocation species sequence reads high-throughput sequencing. sequence read count vector y[1:, j, k] assumed follow multinomial distribution, total number sequence reads replicate k site j number trials. multinomial cell probability, pi[1:, j, k] (shown figure), modeled function latent variables u[1:, j, k] described r[1:, j, k], proportional relative frequency species sequence reads. variation r[, j, k] governed parameter phi[], represents relative dominance species sequence. Species higher phi[] values tend reads species sequence included library (u[, j, k] = 1), whereas species lower phi[] values tend fewer reads. , false positives assumed occur stage; , pi[, j, k] always takes zero replicates include species DNA sequence (.e., u[, j, k] = 0). figure, arrows directed psi[], theta[], phi[] indicate variation parameters governed community-level multivariate normal prior distribution mean vector Mu covariance matrix Sigma. two components Sigma standard deviation sigma correlation coefficient rho (shown figure).","code":""},{"path":"https://fukayak.github.io/occumb/dev/articles/model_specification.html","id":"covariate-modeling-of-psi-theta-and-phi","dir":"Articles","previous_headings":"","what":"Covariate modeling of psi, theta, and phi","title":"Model specification in occumb()","text":"Variations psi, theta, phi can modeled functions covariates manner similar generalized linear models (GLMs). , covariates incorporated linear predictors appropriate link scales parameters (logit psi theta, log phi). occumb() function allows covariate modeling using standard R formula syntax. three types related covariates: species covariates can take different values species (e.g., traits), site covariates can take different values site (e.g., habitat characteristics), replicate covariates can take different values replicate (e.g., amount water filtered). covariates can included data object via spec_cov, site_cov, repl_cov arguments occumbData() function used specify models occumb() function. occumb() function specifies covariates parameter using formula_<parameter name> formula_<parameter name>_shared arguments. formula_<parameter name> formula_<parameter name>_shared arguments used specify species-specific effects effects shared species, respectively. following table shows examples modeling psi using formula_psi formula_psi_shared arguments, species index, j site index, speccov1 continuous species covariate, sitecov1 sitecov2 continuous site covariates. psi can modeled function species site covariates. occumb(), species-specific effects psi denoted gamma, shared effects psi denoted gamma_shared. first row table specifies default intercept-model logit(psi[]) determined intercept term gamma[, 1]. straightforward case, occumb() always estimates species-specific intercept gamma[, 1]. second case, species-specific effect gamma[, 2] site covariate sitecov1 incorporated. Note site subscript j added psi left-hand side equation value psi now varies site site depending value sitecov1[j]. third fourth cases, another site covariate, sitecov2, specified addition sitecov1. fourth case, interaction specified using * operator. fifth case, formula_psi_shared argument specifies shared effect species covariate speccov1. Note effect gamma_shared[1] speccov1[] linear predictor subscript . species-specific effects estimated species covariates, occumb() accepts species covariates interactions formula_<parameter name>_shared argument. Introducing species covariates change dimension psi (note subscript ), may help reveal variations site occupancy probability associated species characteristics. sixth case, site covariate sitecov1 specified formula_psi_shared argument. Note , contrast second case, sitecov1[j] shared effect gamma_shared[1]. species often expected respond differently site characteristics, site covariates likely introduced using formula_psi argument. Nevertheless, formula_psi_shared argument can used consistent covariate effects across species expected data support . similar approach can applied theta phi, can modeled functions species, site, replicate covariates. following table shows examples theta modeling, species index, j site index, k replicate index, speccov1 continuous species covariate, sitecov1 continuous site covariate, replcov1 continuous replicate covariate. occumb(), species-specific effects theta denoted beta shared effects theta denoted beta_shared. first row table specifies intercept-model. case psi, occumb() always estimates species-specific intercept beta[, 1]. second third cases can contrasted second case psi example single covariate specified formula_psi argument, remaining cases fifth sixth cases psi example single covariate specified formula_psi_shared argument. replicate covariate replcov1 site index j replicate index k, specifying adds two indices theta. rule applies phi modeling. following example complex case involving interactions different types covariates. occumb(), species-specific effects phi denoted alpha shared effects phi denoted alpha_shared. Similar two parameters, occumb() always estimates species-specific intercept alpha[, 1]. following table summarizes covariate types accepted formula argument.","code":""},{"path":"https://fukayak.github.io/occumb/dev/articles/model_specification.html","id":"prior-distributions","dir":"Articles","previous_headings":"","what":"Prior distributions","title":"Model specification in occumb()","text":"hierarchical prior distribution specified species-specific effects alpha, beta, gamma. Specifically, vector effects assumed follow multivariate normal distribution, prior distribution specified elements mean vector Mu covariance matrix Sigma. element values Mu Sigma estimated data; hyperparameters summarize variation species-specific effects community level, estimates may interest assessing e.g., whether covariates consistent effect wide range species. element Mu, normal prior distribution mean 0 precision (.e., inverse variance) prior_prec specified. prior_prec value determined prior_prec argument occumb() function, default set small value 1e-4 specify vague priors. Sigma decomposed elements standard deviation sigma correlation coefficient rho, specified different vague prior. Specifically, uniform prior distribution lower limit 0 upper limit prior_ulim specified sigma, uniform prior lower limit −1 upper limit 1 set rho. value prior_ulim determined prior_ulim argument occumb() function set 1e4 default. shared effects alpha_shared, beta_shared, gamma_shared, normal prior distribution mean 0 precision prior_prec specified.","code":""},{"path":"https://fukayak.github.io/occumb/dev/articles/model_specification.html","id":"after-all-which-are-the-relevant-parameters","dir":"Articles","previous_headings":"","what":"After all, which are the relevant parameters?","title":"Model specification in occumb()","text":"latent variables parameters model estimated saved using occumb() function follows. Note occumb() save u r, function pi. posterior samples latent variables parameters can accessed using get_post_samples() get_post_summary() functions. z Site occupancy status species. pi Multinomial probabilities species sequence read counts. phi Sequence relative dominance species. theta Sequence capture probabilities species. psi Site occupancy probabilities species. alpha Species-specific effects sequence relative dominance (phi). beta Species-specific effects sequence capture probabilities (theta). gamma Species-specific effects site occupancy probabilities (psi). alpha_shared Effects sequence relative dominance (phi) common across species. beta_shared Effects sequence capture probabilities (theta) common across species. gamma_shared Effects site occupancy probabilities (psi) common across species. Mu Community-level averages species-specific effects (alpha, beta, gamma). sigma Standard deviations species-specific effects (alpha, beta, gamma). rho Correlation coefficients species-specific effects (alpha, beta, gamma).","code":""},{"path":"https://fukayak.github.io/occumb/dev/articles/occumb.html","id":"prepare-dataset","dir":"Articles","previous_headings":"","what":"Prepare dataset","title":"Introduction to occumb","text":"use package’s built-data fish (see ?fish documentation) analyze sequence count data using occumb package. summary() function can used provide overview dataset. summary sequence read count data can found first block output. Data obtained samples taken 50 sites ×\\times () three replicates, 50 fish species recorded. summary missing samples, number replicates per site, sequencing depth (.e., total number sequence reads per sample) also presented. second block output indicates fish data also two covariates: one continuous species covariate, mismatch, one discrete site covariate, riverbank, can used following analysis. third block output shows labels assigned 50 species, 50 sites, three replicates. , fish data brought together set data relevant analysis using occumb package. analyzing one’s dataset, can use occumbData() set data object. want display entire data, just type fish.","code":"data(fish) summary(fish) #> Sequence read counts:  #>  Number of species, I = 50  #>  Number of sites, J = 50  #>  Maximum number of replicates per site, K = 3  #>  Number of missing observations = 6  #>  Number of replicates per site: 2.88 (average), 0.33 (sd) #>  Sequencing depth: 77910 (average), 98034.7 (sd) #>  #> Species covariates:  #>  mismatch (continuous)  #> Site covariates:  #>  riverbank (categorical)  #> Replicate covariates:  #>  (None)  #>  #> Labels for species:  #>  Abbottina rivularis, Acanthogobius lactipes, Acheilognathus macropterus, Acheilognathus rhombeus, Anguilla japonica, Biwia zezera, Carassius cuvieri, Carassius spp., Channa argus, Ctenopharyngodon idella, Cyprinus carpio, Gambusia affinis, Gnathopogon spp., Gymnogobius castaneus, Gymnogobius petschiliensis, Gymnogobius urotaenia, Hemibarbus spp., Hypomesus nipponensis, Hypophthalmichthys spp., Hyporhamphus intermedius, Ictalurus punctatus, Ischikauia steenackeri, Lepomis macrochirus macrochirus, Leucopsarion petersii, Megalobrama amblycephala, Micropterus dolomieu dolomieu, Micropterus salmoides, Misgurnus spp., Monopterus albus, Mugil cephalus cephalus, Mylopharyngodon piceus, Nipponocypris sieboldii, Nipponocypris temminckii, Opsariichthys platypus, Opsariichthys uncirostris uncirostris, Oryzias latipes, Plecoglossus altivelis altivelis, Pseudogobio spp., Pseudorasbora parva, Rhinogobius spp., Rhodeus ocellatus ocellatus, Salangichthys microdon, Sarcocheilichthys variegatus microoculus, Silurus asotus, Squalidus chankaensis biwae, Tachysurus tokiensis, Tanakia lanceolata, Tribolodon brandtii maruta, Tribolodon hakonensis, Tridentiger spp.  #> Labels for sites:  #>  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50  #> Labels for replicates:  #>  L, C, R fish # Result not shown"},{"path":"https://fukayak.github.io/occumb/dev/articles/occumb.html","id":"fit-models","dir":"Articles","previous_headings":"","what":"Fit models","title":"Introduction to occumb","text":"Using fish dataset (dataset constructed occumbData()), one can fit multispecies site occupancy model eDNA metabarcoding using occumb() function fits model fully Bayesian approach via Markov Chain Monte Carlo (MCMC) method implemented JAGS. occumb() several arguments accept model formulas fit different model variants using usual R formula syntax. See vignette(\"model_specification\") overview models occumb() can fit details specify models. Fitting null model (.e., intercept-model, although value intercept species-specific) simple, follows: model fitting can take approximately one hour. Given occumb() fits class complex hierarchical models many parameters unknown variables, may require, depending dataset size, long time /lot memory model fitting. Setting parallel = TRUE recommended faster model fitting parallel computations. model incorporating species site covariates fish dataset can fitted follows: , riverbank specified covariate site occupancy probability (psi) formula_psi argument, mismatch covariate relative dominance sequence (phi) formula_phi_shared argument. latter, since mismatch species covariate, formula_phi_shared argument used instead formula_phi effect mismatch constant across species; see vignette(\"model_specification\") details. Thus, generalized linear models (GLMs), model parameters can expressed functions covariates, occumb() allows straightforward covariate specification using formula syntax. see later examine estimated parameter values covariate effects. occumb() also several arguments controlling MCMC computation fit model. example, obtain precise posterior estimates example, one can explicitly set n.iter n.thin arguments obtain longer less autocorrelated MCMC samples. following, n.iter n.thin set twice default. Note fitting model using occumb(), warning message \"least one Rhat value calculated.\" may appear. Usually, warning can ignored safely. models fit occumb(), values latent variables may change across MCMC iterations, making impossible compute Rhat values . correct behavior model, can cause warning displayed even MCMC method working properly.","code":"fit0 <- occumb(data = fish, parallel = TRUE) fit1 <- occumb(formula_psi = ~ riverbank,                formula_phi_shared = ~ mismatch,                data = fish,                parallel = TRUE) fit1x <- occumb(formula_psi = ~ riverbank,                 formula_phi_shared = ~ mismatch,                 data = fish,                 n.thin = 20,                 n.iter = 40000,                 parallel = TRUE)"},{"path":"https://fukayak.github.io/occumb/dev/articles/occumb.html","id":"check-posterior-samples","dir":"Articles","previous_headings":"","what":"Check posterior samples","title":"Introduction to occumb","text":"fit1 object, examine access diagnose posterior sample obtained using occumb(). Enter object name fit1 display summary MCMC results, including table posterior estimates saved parameter. plot() function draws trace plot density plot parameter.  Users jagsUI package familiar outputs operations. Model fitting occumb() relies functions provided jagsUI package, operations apply print plot methods jagsUI objects. summary() function provides high-level summary results. based previous version summary method jagsUI objects (implemented jagsUI package version 1.5.2) modified occumb() output, displays data summary, model equations, MCMC settings, quick overview convergence relevant model parameters. Convergence MCMC algorithm determined based Rhat value, becomes 1 chains converged. Customarily, Rhat values less 1.1 required parameters interest. Overall, fit1 model far convergent, convergence phi alpha, parameters related relative dominance species sequence reads, good (.e., high values Rhat); hence, longer MCMC runs required formal inference. get_post_samples() get_post_summary() functions can used access posterior samples individual parameters summaries. may require understanding model parameters names: see vignette(\"model_specification\") details. example, attempt obtain posterior summary site occupancy probability psi using get_post_summary() function. fit1 model, psi assumed different values site depending riverbank covariate (remember psi_formula argument fit1). Therefore, psi estimated 50 species ×\\times 50 sites (note psi differs species default), two subscripts brackets distinguish . species site parameter psi[1,1] ? psi[2,1]? Information regarding dimensions parameters provided attributes resulting object. Thus, $dimension attribute, one can know first subscript psi represents species second sites. $label attribute, one can know psi[1,1] represents value psi Abbottina rivularis site 1, psi[2,1] represents value psi Acanthogobius lactipes site 1. Let us also look posterior summary gamma, denotes species-specific effects psi. gamma two effect values species: intercept, (Intercept), effect absence vegetation riverbank, riverbankwithout_vegetation. Displaying summary, one can see , many species, absence vegetation negative effect psi (link scale). posterior summary Mu, denotes community average species-specific effects, shows riverbankwithout_vegetation community-wide negative effect psi (note label attribute Mu[4] community-level effect riverbankwithout_vegetation). Next, let us access posterior samples rather summary using get_post_samples() function. extract posterior sample psi fit1 example. resulting object, post_sample_psi, 3-dimensional array containing posterior sample psi. Information dimensions extracted sample provided attributes. Thus, second dimension post_sample_psi corresponds species third sites. labels species sites indicate post_sample_psi[, 1, 1] contains posterior sample psi Abbottina rivularis site 1.","code":"fit1 # Result not shown plot(fit1) # Outputs many figures; enter \"Esc\" or \"Ctrl + C\" to quit summary(fit1) #> Summary for an occumbFit object  #>  #> Summary of data: #>  Number of species, I = 50  #>  Number of sites, J = 50  #>  Maximum number of replicates per site, K = 3  #>  Number of missing observations = 6  #>  Number of replicates per site: 2.88 (average), 0.33 (sd)  #>  Sequencing depth: 77910 (average), 98034.7 (sd)  #>  #> Model specification: #>  formula_phi:          ~ 1  #>  formula_theta:        ~ 1  #>  formula_psi:          ~ riverbank  #>  formula_phi_shared:   ~ mismatch  #>  formula_theta_shared: ~ 1  #>  formula_psi_shared:   ~ 1  #>  prior_prec:           1e-04  #>  prior_ulim:           10000  #>  #> Saved parameters: #>  Mu sigma rho alpha beta gamma alpha_shared phi theta psi z pi deviance  #>  #> MCMC ran in parallel for 43.593 minutes at time 2023-09-11 20:16:31.787026: #>  For each of 4 chains: #>   Adaptation:            100 iterations (sufficient) #>   Burn-in:               10000 iterations #>   Thin rate:             10 iterations #>   Total chain length:    20100 iterations #>   Posterior sample size: 1000 draws #>  #> Summary of posterior samples:  #>  Mu:  #>   Number of parameters: 4  #>   Rhat:  1.009 (min), 1.027 (median), 1.043 (mean), 1.109 (max)  #>   n.eff: 30 (min), 117.5 (median), 154.2 (mean), 352 (max)  #>  sigma:  #>   Number of parameters: 4  #>   Rhat:  1.004 (min), 1.04 (median), 1.074 (mean), 1.213 (max)  #>   n.eff: 17 (min), 67.5 (median), 217 (mean), 716 (max)  #>  rho:  #>   Number of parameters: 6  #>   Rhat:  1.042 (min), 1.107 (median), 1.106 (mean), 1.187 (max)  #>   n.eff: 19 (min), 33.5 (median), 40.7 (mean), 79 (max)  #>  alpha:  #>   Number of parameters: 50  #>   Rhat:  1.027 (min), 1.093 (median), 1.157 (mean), 1.77 (max)  #>   n.eff: 7 (min), 34 (median), 40.6 (mean), 104 (max)  #>  beta:  #>   Number of parameters: 50  #>   Rhat:  1.002 (min), 1.018 (median), 1.028 (mean), 1.237 (max)  #>   n.eff: 16 (min), 183.5 (median), 349.9 (mean), 4000 (max)  #>  gamma:  #>   Number of parameters: 100  #>   Rhat:  1.001 (min), 1.019 (median), 1.029 (mean), 1.136 (max)  #>   n.eff: 24 (min), 173.5 (median), 363.5 (mean), 2756 (max)  #>  alpha_shared:  #>   Number of parameters: 1  #>   Rhat:  1.1  #>   n.eff: 31  #>  phi:  #>   Number of parameters: 50  #>   Rhat:  1.001 (min), 1.07 (median), 1.127 (mean), 1.664 (max)  #>   n.eff: 8 (min), 42.5 (median), 202.7 (mean), 3161 (max)  #>  theta:  #>   Number of parameters: 50  #>   Rhat:  1.002 (min), 1.016 (median), 1.024 (mean), 1.219 (max)  #>   n.eff: 16 (min), 196 (median), 358.1 (mean), 4000 (max)  #>  psi:  #>   Number of parameters: 2500  #>   Rhat:  1 (min), 1.008 (median), 1.013 (mean), 1.101 (max)  #>   n.eff: 36 (min), 396 (median), 679.3 (mean), 4000 (max)  #>  z:  #>   Number of parameters: 2500  #>   Rhat:  1 (min), 1.006 (median), 1.009 (mean), 1.184 (max), 946 (Number of NAs)  #>   n.eff: 1 (min), 1233.5 (median), 1628.6 (mean), 4000 (max)  #>  pi:  #>   Number of parameters: 7500  #>   Rhat:  1 (min), 1.078 (median), 1.102 (mean), 1.294 (max), 30 (Number of NAs)  #>   n.eff: 1 (min), 1 (median), 1009.1 (mean), 4000 (max)  #>  deviance:  #>   Rhat:  1.001  #>   n.eff: 1332 post_summary_psi <- get_post_summary(fit1, \"psi\") post_summary_psi #>                  mean          sd        2.5%        25%        50%        75%      97.5%     Rhat n.eff overlap0 f #> psi[1,1]   0.64607375 0.083034133 0.466158634 0.59382744 0.65078275 0.70478301 0.79318634 1.001697  1264        0 1 #> psi[2,1]   0.28250539 0.089275014 0.136970706 0.21789079 0.27480943 0.33672122 0.47971573 1.013796   317        0 1 #> psi[3,1]   0.38321762 0.088583160 0.218908875 0.32150169 0.38055944 0.44171514 0.56510758 1.005127   472        0 1 #> psi[4,1]   0.16899696 0.070833671 0.058363836 0.11684541 0.15943020 0.21075828 0.32821669 1.001143  3788        0 1 #> psi[5,1]   0.20435372 0.088327893 0.069729103 0.13950376 0.19315615 0.25286705 0.41681236 1.006308   596        0 1 #> psi[6,1]   0.10737782 0.061179251 0.024299550 0.06246265 0.09573034 0.13925811 0.25577838 1.002291  1418        0 1 #> psi[7,1]   0.84639119 0.053478041 0.730770215 0.81327035 0.85048238 0.88494478 0.93751979 1.003575   654        0 1 #> psi[8,1]   0.94296846 0.028288919 0.875373936 0.92739641 0.94770976 0.96354354 0.98337253 1.002581  1006        0 1 #> (Omitted the remaining) attributes(post_summary_psi)$dimension #> [1] \"Species\" \"Site\" attributes(post_summary_psi)$label #> $Species #>  [1] \"Abbottina rivularis\"                      #>  [2] \"Acanthogobius lactipes\"                   #>  [3] \"Acheilognathus macropterus\"               #>  [4] \"Acheilognathus rhombeus\"                  #>  [5] \"Anguilla japonica\"                        #>  [6] \"Biwia zezera\"                             #>  [7] \"Carassius cuvieri\"                        #>  [8] \"Carassius spp.\"                           #>  [9] \"Channa argus\"                             #> [10] \"Ctenopharyngodon idella\"                  #> [11] \"Cyprinus carpio\"                          #> [12] \"Gambusia affinis\"                         #> [13] \"Gnathopogon spp.\"                         #> [14] \"Gymnogobius castaneus\"                    #> [15] \"Gymnogobius petschiliensis\"               #> [16] \"Gymnogobius urotaenia\"                    #> [17] \"Hemibarbus spp.\"                          #> [18] \"Hypomesus nipponensis\"                    #> [19] \"Hypophthalmichthys spp.\"                  #> [20] \"Hyporhamphus intermedius\"                 #> [21] \"Ictalurus punctatus\"                      #> [22] \"Ischikauia steenackeri\"                   #> [23] \"Lepomis macrochirus macrochirus\"          #> [24] \"Leucopsarion petersii\"                    #> [25] \"Megalobrama amblycephala\"                 #> [26] \"Micropterus dolomieu dolomieu\"            #> [27] \"Micropterus salmoides\"                    #> [28] \"Misgurnus spp.\"                           #> [29] \"Monopterus albus\"                         #> [30] \"Mugil cephalus cephalus\"                  #> [31] \"Mylopharyngodon piceus\"                   #> [32] \"Nipponocypris sieboldii\"                  #> [33] \"Nipponocypris temminckii\"                 #> [34] \"Opsariichthys platypus\"                   #> [35] \"Opsariichthys uncirostris uncirostris\"    #> [36] \"Oryzias latipes\"                          #> [37] \"Plecoglossus altivelis altivelis\"         #> [38] \"Pseudogobio spp.\"                         #> [39] \"Pseudorasbora parva\"                      #> [40] \"Rhinogobius spp.\"                         #> [41] \"Rhodeus ocellatus ocellatus\"              #> [42] \"Salangichthys microdon\"                   #> [43] \"Sarcocheilichthys variegatus microoculus\" #> [44] \"Silurus asotus\"                           #> [45] \"Squalidus chankaensis biwae\"              #> [46] \"Tachysurus tokiensis\"                     #> [47] \"Tanakia lanceolata\"                       #> [48] \"Tribolodon brandtii maruta\"               #> [49] \"Tribolodon hakonensis\"                    #> [50] \"Tridentiger spp.\"                         #>  #> $Site #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" #> [16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" #> [31] \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" #> [46] \"46\" \"47\" \"48\" \"49\" \"50\" post_summary_gamma <- get_post_summary(fit1, \"gamma\") attributes(post_summary_gamma)$dimension #> [1] \"Species\" \"Effects\" attributes(post_summary_gamma)$label$Effects #> [1] \"(Intercept)\"                 \"riverbankwithout_vegetation\" post_summary_gamma #>                    mean        sd       2.5%          25%         50%         75%        97.5%      Rhat n.eff overlap0       f #> (Omitted the beginning) #> gamma[1,2]  -0.68135951 0.4102181 -1.4106885 -0.964385346 -0.71198673 -0.41908665  0.197784615 1.0031831   720        1 0.93875 #> gamma[2,2]  -0.57124068 0.4861383 -1.4368696 -0.906331725 -0.60645174 -0.27472631  0.480190462 1.0141750   414        1 0.87925 #> gamma[3,2]  -1.07479024 0.4260032 -1.9550037 -1.336688784 -1.07308990 -0.80888005 -0.213626578 1.0040679   632        0 0.99250 #> gamma[4,2]  -0.96563859 0.5007208 -1.9760743 -1.276917710 -0.95208744 -0.64960250  0.016721077 1.0020286  1835        1 0.97225 #> gamma[5,2]  -1.01038376 0.5436033 -2.1340409 -1.339282006 -0.98783592 -0.65193007  0.006887964 1.0148153   190        1 0.97400 #> gamma[6,2]  -0.96443244 0.5694898 -2.1291123 -1.307706597 -0.96394933 -0.62099851  0.205483803 1.0043719   989        1 0.95325 #> gamma[7,2]  -1.44522243 0.4356167 -2.4011743 -1.721131931 -1.39965212 -1.14153735 -0.689367497 1.0021543  1065        0 0.99925 #> gamma[8,2]  -1.36146823 0.4820477 -2.3661876 -1.654265660 -1.32819584 -1.04709249 -0.483307820 1.0014346  1791        0 0.99900 #> (Omitted the remaining) get_post_summary(fit1, \"Mu\") #>              mean        sd       2.5%        25%         50%        75% #> Mu[1] -1.18914419 0.1466486 -1.4845230 -1.2872349 -1.18205680 -1.0888031 #> Mu[2]  0.94327206 0.1945952  0.5640255  0.8102745  0.94803155  1.0691758 #> Mu[3]  0.02522906 0.3264013 -0.6034793 -0.1859071  0.01929096  0.2317505 #> Mu[4] -1.03746412 0.1609537 -1.3626390 -1.1414288 -1.03743346 -0.9292544 #>            97.5%     Rhat n.eff overlap0      f #> Mu[1] -0.9119219 1.108793    30        0 1.0000 #> Mu[2]  1.3284452 1.031154   100        0 1.0000 #> Mu[3]  0.6951928 1.008576   352        1 0.5255 #> Mu[4] -0.7312586 1.022904   135        0 1.0000 #> attr(,\"dimension\") #> [1] \"Effects\" #> attr(,\"label\") #> attr(,\"label\")$Effects #> [1] \"phi | (Intercept)\"                 \"theta | (Intercept)\"               #> [3] \"psi | (Intercept)\"                 \"psi | riverbankwithout_vegetation\" post_sample_psi <- get_post_samples(fit1, \"psi\") dim(post_sample_psi) #> [1] 4000   50   50 attributes(post_sample_psi) #> $dim #> [1] 4000   50   50 #>  #> $dimension #> [1] \"Sample\"  \"Species\" \"Site\"    #>  #> $label #> $label$Sample #> NULL #>  #> $label$Species #>  [1] \"Abbottina rivularis\"                      #>  [2] \"Acanthogobius lactipes\"                   #>  [3] \"Acheilognathus macropterus\"               #>  [4] \"Acheilognathus rhombeus\"                  #>  [5] \"Anguilla japonica\"                        #>  [6] \"Biwia zezera\"                             #>  [7] \"Carassius cuvieri\"                        #>  [8] \"Carassius spp.\"                           #>  [9] \"Channa argus\"                             #> [10] \"Ctenopharyngodon idella\"                  #> [11] \"Cyprinus carpio\"                          #> [12] \"Gambusia affinis\"                         #> [13] \"Gnathopogon spp.\"                         #> [14] \"Gymnogobius castaneus\"                    #> [15] \"Gymnogobius petschiliensis\"               #> [16] \"Gymnogobius urotaenia\"                    #> [17] \"Hemibarbus spp.\"                          #> [18] \"Hypomesus nipponensis\"                    #> [19] \"Hypophthalmichthys spp.\"                  #> [20] \"Hyporhamphus intermedius\"                 #> [21] \"Ictalurus punctatus\"                      #> [22] \"Ischikauia steenackeri\"                   #> [23] \"Lepomis macrochirus macrochirus\"          #> [24] \"Leucopsarion petersii\"                    #> [25] \"Megalobrama amblycephala\"                 #> [26] \"Micropterus dolomieu dolomieu\"            #> [27] \"Micropterus salmoides\"                    #> [28] \"Misgurnus spp.\"                           #> [29] \"Monopterus albus\"                         #> [30] \"Mugil cephalus cephalus\"                  #> [31] \"Mylopharyngodon piceus\"                   #> [32] \"Nipponocypris sieboldii\"                  #> [33] \"Nipponocypris temminckii\"                 #> [34] \"Opsariichthys platypus\"                   #> [35] \"Opsariichthys uncirostris uncirostris\"    #> [36] \"Oryzias latipes\"                          #> [37] \"Plecoglossus altivelis altivelis\"         #> [38] \"Pseudogobio spp.\"                         #> [39] \"Pseudorasbora parva\"                      #> [40] \"Rhinogobius spp.\"                         #> [41] \"Rhodeus ocellatus ocellatus\"              #> [42] \"Salangichthys microdon\"                   #> [43] \"Sarcocheilichthys variegatus microoculus\" #> [44] \"Silurus asotus\"                           #> [45] \"Squalidus chankaensis biwae\"              #> [46] \"Tachysurus tokiensis\"                     #> [47] \"Tanakia lanceolata\"                       #> [48] \"Tribolodon brandtii maruta\"               #> [49] \"Tribolodon hakonensis\"                    #> [50] \"Tridentiger spp.\"                         #>  #> $label$Site #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" #> [16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" #> [31] \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" #> [46] \"46\" \"47\" \"48\" \"49\" \"50\" post_sample_psi[, 1, 1] #>  [1] 0.6673664 0.7505735 0.6416083 0.7011978 0.5935338 0.6087940 0.6159829 #>  [8] 0.7758206 0.6710466 0.7423708 0.6244308 0.6237291 0.6344345 0.6715390 #> [15] 0.6255393 0.7306071 0.6781538 0.7391794 0.6678208 0.6715868 0.7582302 #> [22] 0.5947020 0.4880676 0.6958859 0.6202520 0.5487584 0.6781225 0.7073072 #> (Omitted the remaining)"},{"path":"https://fukayak.github.io/occumb/dev/articles/occumb.html","id":"predict-parameter-values","dir":"Articles","previous_headings":"","what":"Predict parameter values","title":"Introduction to occumb","text":"occumb(), three parameters, psi, theta, phi, can modeled function covariates (see vignette(\"model_specification\") details). Prediction parameters conditional given set covariate values can easily obtained using predict() function fitted object. predict() function newdata argument accepts optional dataset object used prediction. newdata specified, predictions made using fitted covariates; alternative get_post_summary() get_post_samples() functions accessing posterior summaries posterior samples parameters. example, following output 3-dimensional array posterior median upper lower limits 95% credible interval psi 50 species 50 sites. One can obtain posterior samples psi predict() function specifying type = \"samples\" instead type = \"quantiles\". example specifying newdata argument, let us prepare new dataset containing two sites different riverbank values. Recall fit1, psi expressed function site covariate riverbank. , use new dataset created predict psi two sites different riverbank values. following, fish_raw data object built package stores data fish list format (see ?fish_raw documentation). Covariate values relevant prediction sequence read counts. Hence, hypothetical data may given sequence read count data, y, set array elements 1, new_y, . Let’s verify newdata dataset = 50 species, J = 2 sites, K = 1 replicate, including mismatch riverbank covariates. Note first site labeled (demonstration purposes) site vegetation (with_vegetation) second site site without vegetation (without_vegetation). predict() function applied newdata argument, predictions made using covariate values contained newdata. following provide prediction psi sites without vegetation.","code":"predict_psi <- predict(fit1, parameter = \"psi\", type = \"quantiles\") dim(predict_psi) #> [1]  3 50 50 attributes(predict_psi) #> $dim #> [1]  3 50 50 #>  #> $dimnames #> $dimnames[[1]] #> [1] \"50%\"   \"2.5%\"  \"97.5%\" #>  #> $dimnames[[2]] #> NULL #>  #> $dimnames[[3]] #> NULL #>  #>  #> $parameter #> [1] \"psi\" #>  #> $scale #> [1] \"response\" #>  #> $dimension #> [1] \"Statistics\" \"Species\"    \"Sites\"      #>  #> $label #> $label$Statistics #> [1] \"50%\"   \"2.5%\"  \"97.5%\" #>  #> $label$Species #>  [1] \"Abbottina rivularis\"                      #>  [2] \"Acanthogobius lactipes\"                   #>  [3] \"Acheilognathus macropterus\"               #>  [4] \"Acheilognathus rhombeus\"                  #>  [5] \"Anguilla japonica\"                        #>  [6] \"Biwia zezera\"                             #>  [7] \"Carassius cuvieri\"                        #>  [8] \"Carassius spp.\"                           #>  [9] \"Channa argus\"                             #> [10] \"Ctenopharyngodon idella\"                  #> [11] \"Cyprinus carpio\"                          #> [12] \"Gambusia affinis\"                         #> [13] \"Gnathopogon spp.\"                         #> [14] \"Gymnogobius castaneus\"                    #> [15] \"Gymnogobius petschiliensis\"               #> [16] \"Gymnogobius urotaenia\"                    #> [17] \"Hemibarbus spp.\"                          #> [18] \"Hypomesus nipponensis\"                    #> [19] \"Hypophthalmichthys spp.\"                  #> [20] \"Hyporhamphus intermedius\"                 #> [21] \"Ictalurus punctatus\"                      #> [22] \"Ischikauia steenackeri\"                   #> [23] \"Lepomis macrochirus macrochirus\"          #> [24] \"Leucopsarion petersii\"                    #> [25] \"Megalobrama amblycephala\"                 #> [26] \"Micropterus dolomieu dolomieu\"            #> [27] \"Micropterus salmoides\"                    #> [28] \"Misgurnus spp.\"                           #> [29] \"Monopterus albus\"                         #> [30] \"Mugil cephalus cephalus\"                  #> [31] \"Mylopharyngodon piceus\"                   #> [32] \"Nipponocypris sieboldii\"                  #> [33] \"Nipponocypris temminckii\"                 #> [34] \"Opsariichthys platypus\"                   #> [35] \"Opsariichthys uncirostris uncirostris\"    #> [36] \"Oryzias latipes\"                          #> [37] \"Plecoglossus altivelis altivelis\"         #> [38] \"Pseudogobio spp.\"                         #> [39] \"Pseudorasbora parva\"                      #> [40] \"Rhinogobius spp.\"                         #> [41] \"Rhodeus ocellatus ocellatus\"              #> [42] \"Salangichthys microdon\"                   #> [43] \"Sarcocheilichthys variegatus microoculus\" #> [44] \"Silurus asotus\"                           #> [45] \"Squalidus chankaensis biwae\"              #> [46] \"Tachysurus tokiensis\"                     #> [47] \"Tanakia lanceolata\"                       #> [48] \"Tribolodon brandtii maruta\"               #> [49] \"Tribolodon hakonensis\"                    #> [50] \"Tridentiger spp.\"                         #>  #> $label$Sites #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" #> [16] \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" #> [31] \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" #> [46] \"46\" \"47\" \"48\" \"49\" \"50\" new_y <- array(1, dim = c(50, 2, 1)) new_riverbank <- factor(levels(fish_raw$riverbank)) dimnames(new_y)[[1]] <- dimnames(fish_raw$y)[[1]] dimnames(new_y)[[2]] <- levels(fish_raw$riverbank) newdata <- occumbData(y = new_y,                       spec_cov = list(mismatch = fish_raw$mismatch),                       site_cov = list(riverbank = new_riverbank)) summary(newdata) #> Sequence read counts:  #>  Number of species, I = 50  #>  Number of sites, J = 2  #>  Maximum number of replicates per site, K = 1  #>  Number of missing observations = 0  #>  Number of replicates per site: 1 (average), 0 (sd)  #>  Sequencing depth: 50 (average), 0 (sd)  #>  #> Species covariates:  #>  mismatch (continuous)  #> Site covariates:  #>  riverbank (categorical)  #> Replicate covariates:  #>  (None)  #>  #> Labels for species:  #>  Abbottina rivularis, Acanthogobius lactipes, Acheilognathus macropterus, Acheilognathus rhombeus, Anguilla japonica, Biwia zezera, Carassius cuvieri, Carassius spp., Channa argus, Ctenopharyngodon idella, Cyprinus carpio, Gambusia affinis, Gnathopogon spp., Gymnogobius castaneus, Gymnogobius petschiliensis, Gymnogobius urotaenia, Hemibarbus spp., Hypomesus nipponensis, Hypophthalmichthys spp., Hyporhamphus intermedius, Ictalurus punctatus, Ischikauia steenackeri, Lepomis macrochirus macrochirus, Leucopsarion petersii, Megalobrama amblycephala, Micropterus dolomieu dolomieu, Micropterus salmoides, Misgurnus spp., Monopterus albus, Mugil cephalus cephalus, Mylopharyngodon piceus, Nipponocypris sieboldii, Nipponocypris temminckii, Opsariichthys platypus, Opsariichthys uncirostris uncirostris, Oryzias latipes, Plecoglossus altivelis altivelis, Pseudogobio spp., Pseudorasbora parva, Rhinogobius spp., Rhodeus ocellatus ocellatus, Salangichthys microdon, Sarcocheilichthys variegatus microoculus, Silurus asotus, Squalidus chankaensis biwae, Tachysurus tokiensis, Tanakia lanceolata, Tribolodon brandtii maruta, Tribolodon hakonensis, Tridentiger spp.  #> Labels for sites:  #>  with_vegetation, without_vegetation  #> Labels for replicates:  #>  (None) predict(fit1, newdata = newdata, parameter = \"psi\", type = \"quantiles\") #> , , 1 #>  #>            [,1]      [,2]      [,3]       [,4]       [,5]       [,6]      [,7] #> 50%   0.6615133 0.2751231 0.3827295 0.15224665 0.17718177 0.09182312 0.8490621 #> 2.5%  0.4802434 0.1300821 0.2306797 0.05507663 0.06783645 0.02441254 0.7212899 #> 97.5% 0.7915599 0.4723714 0.5649520 0.32693805 0.38346795 0.24695832 0.9368627 #>            [,8]      [,9]     [,10]     [,11]      [,12]     [,13]      [,14] #> 50%   0.9491461 0.6094722 0.4620570 0.9901477 0.08998769 0.8800989 0.15458012 #> 2.5%  0.8789348 0.4101236 0.2996333 0.9557121 0.02421783 0.7735010 0.05625485 #> 97.5% 0.9844834 0.8144525 0.6430711 0.9986149 0.23751947 0.9596028 0.31844988 #>            [,15]     [,16]     [,17]      [,18]     [,19]     [,20]     [,21] #> 50%   0.12125019 0.9695970 0.9028737 0.15509196 0.5713331 0.2300419 0.8826944 #> 2.5%  0.03724413 0.9110775 0.8015870 0.05106154 0.3814354 0.1092197 0.7664569 #> 97.5% 0.26923379 0.9924366 0.9631803 0.34754250 0.7741282 0.4051336 0.9550034 #>           [,22]     [,23]      [,24]      [,25]      [,26]     [,27]     [,28] #> 50%   0.7916404 0.7469745 0.06964821 0.15088247 0.10296476 0.8278437 0.9750893 #> 2.5%  0.6445037 0.5788305 0.01384897 0.04985234 0.02831969 0.7060083 0.9284540 #> 97.5% 0.9020019 0.8627692 0.19692563 0.34110667 0.25821933 0.9216507 0.9943395 #>            [,29]     [,30]      [,31]     [,32]     [,33]     [,34]     [,35] #> 50%   0.06220973 0.4863689 0.07515230 0.4353972 0.2299977 0.8332137 0.5024979 #> 2.5%  0.01098996 0.2994199 0.01757379 0.2667359 0.1056246 0.6977411 0.3344813 #> 97.5% 0.19309849 0.6536841 0.21486234 0.6188191 0.4107509 0.9326166 0.6992168 #>           [,36]      [,37]     [,38]     [,39]     [,40]     [,41]      [,42] #> 50%   0.5793313 0.09849281 0.5462387 0.9190994 0.9970209 0.8173368 0.09874564 #> 2.5%  0.4008518 0.02705771 0.3669093 0.8250025 0.9815437 0.6718077 0.02554623 #> 97.5% 0.7541354 0.25569027 0.7265439 0.9755158 0.9997452 0.9114977 0.26906733 #>            [,43]     [,44]     [,45]     [,46]      [,47]     [,48]     [,49] #> 50%   0.15160773 0.5472967 0.3177699 0.1336518 0.16453410 0.3119199 0.1010661 #> 2.5%  0.05407187 0.3702903 0.1750710 0.0401887 0.06069858 0.1646373 0.0270361 #> 97.5% 0.32445164 0.7429405 0.4983112 0.3168030 0.32694679 0.4919569 0.2257502 #>           [,50] #> 50%   0.9885246 #> 2.5%  0.9521853 #> 97.5% 0.9984315 #>  #> , , 2 #>  #>            [,1]       [,2]       [,3]       [,4]       [,5]       [,6] #> 50%   0.4756873 0.16831019 0.17344502 0.06827157 0.08065680 0.03799725 #> 2.5%  0.3210251 0.07468112 0.08268459 0.02152790 0.02558621 0.00904520 #> 97.5% 0.6477671 0.31803370 0.30375314 0.16653407 0.20628815 0.10914663 #>            [,7]      [,8]      [,9]     [,10]     [,11]      [,12]     [,13] #> 50%   0.5747380 0.8277408 0.4451700 0.2415741 0.9426904 0.04637033 0.6435848 #> 2.5%  0.4085796 0.6832309 0.2727587 0.1336498 0.8361653 0.01254011 0.4719155 #> 97.5% 0.7316505 0.9241055 0.6653103 0.3976390 0.9855532 0.12900086 0.7834428 #>            [,14]      [,15]     [,16]     [,17]      [,18]     [,19]     [,20] #> 50%   0.07037047 0.06163691 0.8602899 0.6909106 0.08289891 0.3366483 0.1156426 #> 2.5%  0.02364689 0.01866216 0.7192849 0.5273816 0.02726444 0.2012909 0.0498471 #> 97.5% 0.16850684 0.15171748 0.9468762 0.8219908 0.20203910 0.5227359 0.2284146 #>           [,21]     [,22]     [,23]       [,24]      [,25]      [,26]     [,27] #> 50%   0.7204299 0.5831452 0.5653456 0.030925710 0.06781351 0.05881219 0.6000844 #> 2.5%  0.5574411 0.4218203 0.4080076 0.006236538 0.02063876 0.01733949 0.4410841 #> 97.5% 0.8503492 0.7422631 0.7276702 0.094870829 0.17049638 0.16207666 0.7470483 #>           [,28]       [,29]     [,30]      [,31]      [,32]      [,33] #> 50%   0.9126102 0.035225441 0.3407391 0.04236923 0.16616006 0.08886842 #> 2.5%  0.8020100 0.007672009 0.2031182 0.01018349 0.07272355 0.03188771 #> 97.5% 0.9696633 0.110552419 0.5178231 0.13816851 0.29161845 0.18440940 #>           [,34]     [,35]     [,36]      [,37]     [,38]     [,39]     [,40] #> 50%   0.5159626 0.2344728 0.3705463 0.04820736 0.2161039 0.7693729 0.9831972 #> 2.5%  0.3512136 0.1224432 0.2295261 0.01206818 0.1039605 0.6147098 0.9306534 #> 97.5% 0.6751210 0.3846941 0.5527593 0.13468654 0.3594184 0.8923270 0.9976299 #>           [,41]      [,42]      [,43]     [,44]      [,45]      [,46] #> 50%   0.6527351 0.06006526 0.06753850 0.2371226 0.15535572 0.05145973 #> 2.5%  0.4967540 0.01537025 0.02157825 0.1134572 0.07282467 0.01382803 #> 97.5% 0.7956659 0.16542028 0.16515022 0.3848913 0.27405126 0.13368309 #>            [,47]      [,48]      [,49]     [,50] #> 50%   0.08990812 0.13653424 0.05038579 0.9428926 #> 2.5%  0.03330197 0.05777936 0.01466287 0.8401821 #> 97.5% 0.20500919 0.25327092 0.12890174 0.9873862 #>  #> attr(,\"parameter\") #> [1] \"psi\" #> attr(,\"scale\") #> [1] \"response\" #> attr(,\"dimension\") #> [1] \"Statistics\" \"Species\"    \"Sites\"      #> attr(,\"label\") #> attr(,\"label\")$Statistics #> [1] \"50%\"   \"2.5%\"  \"97.5%\" #>  #> attr(,\"label\")$Species #>  [1] \"Abbottina rivularis\"                      #>  [2] \"Acanthogobius lactipes\"                   #>  [3] \"Acheilognathus macropterus\"               #>  [4] \"Acheilognathus rhombeus\"                  #>  [5] \"Anguilla japonica\"                        #>  [6] \"Biwia zezera\"                             #>  [7] \"Carassius cuvieri\"                        #>  [8] \"Carassius spp.\"                           #>  [9] \"Channa argus\"                             #> [10] \"Ctenopharyngodon idella\"                  #> [11] \"Cyprinus carpio\"                          #> [12] \"Gambusia affinis\"                         #> [13] \"Gnathopogon spp.\"                         #> [14] \"Gymnogobius castaneus\"                    #> [15] \"Gymnogobius petschiliensis\"               #> [16] \"Gymnogobius urotaenia\"                    #> [17] \"Hemibarbus spp.\"                          #> [18] \"Hypomesus nipponensis\"                    #> [19] \"Hypophthalmichthys spp.\"                  #> [20] \"Hyporhamphus intermedius\"                 #> [21] \"Ictalurus punctatus\"                      #> [22] \"Ischikauia steenackeri\"                   #> [23] \"Lepomis macrochirus macrochirus\"          #> [24] \"Leucopsarion petersii\"                    #> [25] \"Megalobrama amblycephala\"                 #> [26] \"Micropterus dolomieu dolomieu\"            #> [27] \"Micropterus salmoides\"                    #> [28] \"Misgurnus spp.\"                           #> [29] \"Monopterus albus\"                         #> [30] \"Mugil cephalus cephalus\"                  #> [31] \"Mylopharyngodon piceus\"                   #> [32] \"Nipponocypris sieboldii\"                  #> [33] \"Nipponocypris temminckii\"                 #> [34] \"Opsariichthys platypus\"                   #> [35] \"Opsariichthys uncirostris uncirostris\"    #> [36] \"Oryzias latipes\"                          #> [37] \"Plecoglossus altivelis altivelis\"         #> [38] \"Pseudogobio spp.\"                         #> [39] \"Pseudorasbora parva\"                      #> [40] \"Rhinogobius spp.\"                         #> [41] \"Rhodeus ocellatus ocellatus\"              #> [42] \"Salangichthys microdon\"                   #> [43] \"Sarcocheilichthys variegatus microoculus\" #> [44] \"Silurus asotus\"                           #> [45] \"Squalidus chankaensis biwae\"              #> [46] \"Tachysurus tokiensis\"                     #> [47] \"Tanakia lanceolata\"                       #> [48] \"Tribolodon brandtii maruta\"               #> [49] \"Tribolodon hakonensis\"                    #> [50] \"Tridentiger spp.\"                         #>  #> attr(,\"label\")$Sites #> [1] \"with_vegetation\"    \"without_vegetation\""},{"path":"https://fukayak.github.io/occumb/dev/articles/occumb.html","id":"assess-goodness-of-fit","dir":"Articles","previous_headings":"","what":"Assess goodness-of-fit","title":"Introduction to occumb","text":"Assessing goodness--fit model essential step data analysis based statistical models. goodness--fit models fitted occumb() evaluated using gof() function, computes Bayesian p-value using posterior predictive check approach. Bayesian p-value may take extreme values (e.g., p < 0.05 p > 0.95) model poorly fitted. faster computation, recommended cores argument specified explicitly parallel computations. default, gof() function outputs scatter plot fit statistics (case, default Freeman-Tukey statistics). Enter name resulting object summarize results. moderate p-value indicated lack evidence model’s inadequacy fitting. plot() function can used (re)draw scatter plot fit statistics resulting object.","code":"gof_result <- gof(fit1, cores = 4) gof_result #> Posterior predictive check for an occumbFit object: #>  Statistics: Freeman-Tukey  #>  p-value:    0.2005  #>  Discrepancy statistics for observed data:   542.81 (mean), 17.92 (sd)  #>  Discrepancy statistics for replicated data: 523.28 (mean), 16.47 (sd) plot(gof_result)"},{"path":"https://fukayak.github.io/occumb/dev/articles/occumb.html","id":"analyze-study-design","dir":"Articles","previous_headings":"","what":"Analyze study design","title":"Introduction to occumb","text":"model fitted occumb() can used identify eDNA metabarcoding study designs can effectively detect species present. many sites, within-site replicates, sequencing depths required reliable species detection? best balance number sites visited, number within-site replicates, sequencing depth limited budget? multispecies site occupancy model fit occumb() answers questions predicting number species expected detected using specific study designs. eval_util_L() eval_util_R() functions available purposes. two functions assume species diversity assessments different spatial scales (.e., former local (L) latter regional (R)). Specifically, eval_util_L() appropriate interested assessing species diversity study sites included dataset, eval_util_R() appropriate interested assessing species diversity broader area includes study sites dataset (.e., population sites “metacommunity”). context fish dataset, eval_util_L() evaluates expected number species detected per site 50 sites dataset different combinations number replicates sequencing depth. example, following give expected number species detected per site (referred Utility ) number replicates K sequencing depth N take values (1, 2, 3) (1000, 10000, 100000), respectively. can seen K N increase, Utility value increases. faster computation, recommended cores argument explicitly specified parallel computation. one knows cost per sequence read high-throughput sequencing, cost per replicate library preparation, research budget values, list_cond_L() function can used obtain set feasible settings cost budget values. can applied eval_util_L() identify optimal study design budget constraints. Hence, specific budget cost, best K = 3 replicates per site effective species detection. contrast eval_util_L(), eval_util_R() considers differences number sites visited. Nevertheless, eval_util_R() can applied similarly eval_util_L(). eval_util_R(), Utility number species expected detected region interest settings number sites J, number replicates K, sequencing depth N. list_cond_R() may return large list possible settings, one may want obtain manually restricted list using J /K arguments.","code":"utilL1 <- eval_util_L(expand.grid(K = 1:3, N = c(1E3, 1E4, 1E5)),                       fit1, cores = 4) utilL1 #>   K     N  Utility #> 1 1 1e+03 13.03225 #> 2 2 1e+03 16.72177 #> 3 3 1e+03 18.21783 #> 4 1 1e+04 14.34826 #> 5 2 1e+04 17.72304 #> 6 3 1e+04 18.92009 #> 7 1 1e+05 15.04591 #> 8 2 1e+05 18.20935 #> 9 3 1e+05 19.23478 settings <- list_cond_L(budget = 875 * 1E3,                         lambda1 = 0.01,                         lambda2 = 5000,                         fit1) utilL2 <- eval_util_L(settings, fit1, cores = 4) utilL2 #>   budget lambda1 lambda2 K          N  Utility #> 1 875000    0.01    5000 1 1250000.00 15.45671 #> 2 875000    0.01    5000 2  375000.00 18.37862 #> 3 875000    0.01    5000 3   83333.33 19.21953 utilR1 <- eval_util_R(expand.grid(J = 1:3, K = 1:3, N = c(1E3, 1E4, 1E5)),                       fit1, cores = 4) utilR1 #> 1  1 1 1e+03 13.06227 #> 2  2 1 1e+03 18.77537 #> 3  3 1 1e+03 22.21901 #> 4  1 2 1e+03 16.75208 #> 5  2 2 1e+03 22.80510 #> 6  3 2 1e+03 26.33776 #> 7  1 3 1e+03 18.18526 #> 8  2 3 1e+03 24.63089 #> 9  3 3 1e+03 28.13433 #> 10 1 1 1e+04 14.36287 #> 11 2 1 1e+04 20.30642 #> 12 3 1 1e+04 23.85725 #> 13 1 2 1e+04 17.65318 #> 14 2 2 1e+04 23.98433 #> 15 3 2 1e+04 27.55905 #> 16 1 3 1e+04 19.03370 #> 17 2 3 1e+04 25.30884 #> 18 3 3 1e+04 29.14037 #> 19 1 1 1e+05 14.97290 #> 20 2 1 1e+05 21.16216 #> 21 3 1 1e+05 24.76543 #> 22 1 2 1e+05 18.25193 #> 23 2 2 1e+05 24.64478 #> 24 3 2 1e+05 28.20150 #> 25 1 3 1e+05 19.33757 #> 26 2 3 1e+05 25.85813 #> 27 3 3 1e+05 29.68874 settings <- list_cond_R(budget = 1125 * 1E3,                         lambda1 = 0.01,                         lambda2 = 5000,                         lambda3 = 5000,                         J = seq(5, 50, 5),                         K = 1:4) utilR2 <- eval_util_R(settings, fit1, cores = 4) utilR2 #>     budget lambda1 lambda2 lambda3  J K           N  Utility #> 1  1125000    0.01    5000    5000  5 1 21500000.00 30.04136 #> 2  1125000    0.01    5000    5000 10 1 10250000.00 35.64544 #> 3  1125000    0.01    5000    5000 15 1  6500000.00 38.60797 #> 4  1125000    0.01    5000    5000 20 1  4625000.00 40.60944 #> 5  1125000    0.01    5000    5000 25 1  3500000.00 42.02112 #> 6  1125000    0.01    5000    5000 30 1  2750000.00 43.15096 #> 7  1125000    0.01    5000    5000 35 1  2214285.71 43.89833 #> 8  1125000    0.01    5000    5000 40 1  1812500.00 44.71556 #> 9  1125000    0.01    5000    5000 45 1  1500000.00 45.22666 #> 10 1125000    0.01    5000    5000 50 1  1250000.00 45.71167 #> 11 1125000    0.01    5000    5000  5 2 10500000.00 33.34409 #> 12 1125000    0.01    5000    5000 10 2  4875000.00 38.81906 #> 13 1125000    0.01    5000    5000 15 2  3000000.00 41.58322 #> 14 1125000    0.01    5000    5000 20 2  2062500.00 43.47530 #> 15 1125000    0.01    5000    5000 25 2  1500000.00 44.69525 #> 16 1125000    0.01    5000    5000 30 2  1125000.00 45.58398 #> 17 1125000    0.01    5000    5000 35 2   857142.86 46.27036 #> 18 1125000    0.01    5000    5000 40 2   656250.00 46.82490 #> 19 1125000    0.01    5000    5000 45 2   500000.00 47.24841 #> 20 1125000    0.01    5000    5000 50 2   375000.00 47.56585 #> 21 1125000    0.01    5000    5000  5 3  6833333.33 34.55557 #> 22 1125000    0.01    5000    5000 10 3  3083333.33 40.03808 #> 23 1125000    0.01    5000    5000 15 3  1833333.33 42.85560 #> 24 1125000    0.01    5000    5000 20 3  1208333.33 44.51759 #> 25 1125000    0.01    5000    5000 25 3   833333.33 45.67757 #> 26 1125000    0.01    5000    5000 30 3   583333.33 46.48685 #> 27 1125000    0.01    5000    5000 35 3   404761.90 47.14072 #> 28 1125000    0.01    5000    5000 40 3   270833.33 47.60570 #> 29 1125000    0.01    5000    5000 45 3   166666.67 47.93433 #> 30 1125000    0.01    5000    5000 50 3    83333.33 48.12801 #> 31 1125000    0.01    5000    5000  5 4  5000000.00 35.17767 #> 32 1125000    0.01    5000    5000 10 4  2187500.00 40.72769 #> 33 1125000    0.01    5000    5000 15 4  1250000.00 43.51095 #> 34 1125000    0.01    5000    5000 20 4   781250.00 45.16898 #> 35 1125000    0.01    5000    5000 25 4   500000.00 46.23139 #> 36 1125000    0.01    5000    5000 30 4   312500.00 46.98586 #> 37 1125000    0.01    5000    5000 35 4   178571.43 47.53393 #> 38 1125000    0.01    5000    5000 40 4    78125.00 47.89744"},{"path":"https://fukayak.github.io/occumb/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Keiichi Fukaya. Author, maintainer. Ken Kellner. Copyright holder.           summary method occumbFit class Mika Takahashi. Author.","code":""},{"path":"https://fukayak.github.io/occumb/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fukaya K, Takahashi M (2024). occumb: Site Occupancy Modeling Environmental DNA Metabarcoding. R package version 1.1.0.9008, https://github.com/fukayak/occumb, https://fukayak.github.io/occumb/.","code":"@Manual{,   title = {occumb: Site Occupancy Modeling for Environmental DNA Metabarcoding},   author = {Keiichi Fukaya and Mika Takahashi},   year = {2024},   note = {R package version 1.1.0.9008, https://github.com/fukayak/occumb},   url = {https://fukayak.github.io/occumb/}, }"},{"path":"https://fukayak.github.io/occumb/dev/index.html","id":"occumb-site-occupancy-modeling-for-environmental-dna-metabarcoding","dir":"","previous_headings":"","what":"Site Occupancy Modeling for Environmental DNA Metabarcoding","title":"Site Occupancy Modeling for Environmental DNA Metabarcoding","text":"occumb R package provides functionalities application multispecies site occupancy modeling environmental DNA (eDNA) metabarcoding. package allows users fit model fully Bayesian approach using conventional formulas R. enables analysis detectability species different stages workflow eDNA metabarcoding inference species site occupancy accounting false negatives. also provides functionality model-based inference assist optimization study design. See package vignette learn use package original paper details model inference.","code":""},{"path":"https://fukayak.github.io/occumb/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Site Occupancy Modeling for Environmental DNA Metabarcoding","text":"need first install JAGS following instructions JAGS homepage. can install latest stable version package CRAN: GitHub repository:","code":"install.packages(\"occumb\") remotes::install_github(\"fukayak/occumb\", ref = \"main\")"},{"path":"https://fukayak.github.io/occumb/dev/index.html","id":"contact-information","dir":"","previous_headings":"","what":"Contact information","title":"Site Occupancy Modeling for Environmental DNA Metabarcoding","text":"Questions bug reports can emailed Keiichi Fukaya (fukaya.keiichi@nies.go.jp).","code":""},{"path":"https://fukayak.github.io/occumb/dev/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Site Occupancy Modeling for Environmental DNA Metabarcoding","text":"development occumb possible without, among others, Martyn Plummer’s JAGS Ken Kellner’s jagsUI R package, main functionality occumb model fitting via Markov chain Monte Carlo (MCMC) relies libraries. Taku Kadoya encouraged us develop package. Koji Makiyama, Shinya Uryu, Kentaro Matsuura contributed package testing. Mito Ikemoto Kentaro Uehira provided valuable feedback package trials documentation reviews. Funding provided Japan Society Promotion Science (KAKENHI; Nos. 20K06102 23H02240).","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected utility for local species diversity assessments. — eval_util_L","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"eval_util_L() evaluates expected utility local species diversity assessment using Monte Carlo integration.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"","code":"eval_util_L(   settings,   fit = NULL,   z = NULL,   theta = NULL,   phi = NULL,   N_rep = 1,   cores = 1L )"},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"settings data frame specifies set conditions utility evaluated. must include columns named K N, specify number replicates per site sequencing depth per replicate, respectively. K N must numeric vectors greater 0. K contains decimal value, discarded treated integer. Additional columns ignored, may included. fit occumbFit object. z Sample values site occupancy status species stored array sample \\(\\times\\) species \\(\\times\\) site dimensions. theta Sample values sequence capture probabilities species stored matrix sample \\(\\times\\) species dimensions array sample \\(\\times\\) species \\(\\times\\) site dimensions. phi Sample values sequence relative dominance species stored matrix sample \\(\\times\\) species dimensions array sample \\(\\times\\) species \\(\\times\\) site dimensions. N_rep Controls sample size Monte Carlo integration. integral evaluated using N_sample * N_rep random samples, N_sample maximum size MCMC sample fit argument parameter sample z, theta, phi arguments. cores number cores use parallelization.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"data frame column named Utility estimates expected utility stored. obtained adding Utility column data frame provided settings argument.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"utility local species diversity assessment given set sites can defined expected number detected species per site (Fukaya et al. 2022). eval_util_L() evaluates utility arbitrary sets sites can potentially different values site occupancy status species, \\(z\\), sequence capture probabilities species, \\(\\theta\\), sequence relative dominance species, \\(\\phi\\), combination K N values specified conditions argument. evaluations can used balance K N maximize utility constant budget (possible combinations K N specified budget cost values easily obtained using list_cond_L(); see example ). also possible examine utility varies different K N values without setting budget level, may useful determining satisfactory level K N purely technical point view. expected utility defined expected value conditional utility form: $$U(K, N \\mid \\boldsymbol{r}, \\boldsymbol{u}) = \\frac{1}{J}\\sum_{j = 1}^{J}\\sum_{= 1}^{}\\left\\{1 - \\prod_{k = 1}^{K}\\left(1 - \\frac{u_{ijk}r_{ijk}}{\\sum_{m = 1}^{}u_{mjk}r_{mjk}} \\right)^N \\right\\}$$ \\(u_{ijk}\\) latent indicator variable representing inclusion sequence species \\(\\) replicate \\(k\\) site \\(j\\), \\(r_{ijk}\\) latent variable proportional relative frequency sequence species \\(\\), conditional presence replicate \\(k\\) site \\(j\\) (Fukaya et al. 2022). Expectations taken respect posterior (possibly prior) predictive distributions \\(\\boldsymbol{r} = \\{r_{ijk}\\}\\) \\(\\boldsymbol{u} = \\{u_{ijk}\\}\\), evaluated numerically using Monte Carlo integration. predictive distributions \\(\\boldsymbol{r}\\) \\(\\boldsymbol{u}\\) depend model parameters \\(z\\), \\(\\theta\\), \\(\\phi\\) values. posterior (prior) distribution specified supplying occumbFit object containing posterior samples via fit argument, supplying matrix array posterior (prior) samples parameter values via z, theta, phi arguments. Higher approximation accuracy can obtained increasing value N_rep. eval_util_L() function can executed supplying fit argument without specifying z, theta, phi arguments, supplying three z, theta, phi arguments without fit argument, supplying fit argument z, theta, phi arguments. z, theta, phi arguments specified addition fit, parameter values given arguments used preferentially evaluate expected utility. sample sizes differ among parameters, parameters smaller sample sizes resampled replacements align sample sizes across parameters. expected utility evaluated assuming homogeneity replicates, sense \\(\\theta\\) \\(\\phi\\), model parameters associated species detection process, constant across replicates within site. reason, eval_util_L() accept replicate-specific \\(\\theta\\) \\(\\phi\\). occumbFit object supplied fit argument replicate-specific parameter, parameter samples used utility evaluation must provided explicitly via theta phi arguments. Monte Carlo integration executed parallel multiple CPU cores, cores argument controls degree parallelization.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki T. Kadoya (2022) Multispecies site occupancy modelling study design spatially replicated environmental DNA metabarcoding. Methods Ecology Evolution 13:183–193. doi:10.1111/2041-210X.13732","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"","code":"# \\donttest{ set.seed(1)  # Generate a random dataset (20 species * 2 sites * 2 reps) I <- 20 # Number of species J <- 2  # Number of sites K <- 2  # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)))  # Fitting a null model fit <- occumb(data = data) #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 229 #>    Total graph size: 673 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.   ## Estimate expected utility # Arbitrary K and N values (util1 <- eval_util_L(expand.grid(K = 1:3, N = c(1E3, 1E4, 1E5)),                       fit)) #>   K     N  Utility #> 1 1 1e+03 19.92034 #> 2 2 1e+03 19.99545 #> 3 3 1e+03 19.99875 #> 4 1 1e+04 19.95207 #> 5 2 1e+04 19.99525 #> 6 3 1e+04 19.99888 #> 7 1 1e+05 19.95416 #> 8 2 1e+05 19.99475 #> 9 3 1e+05 19.99875  # K and N values under specified budget and cost (util2 <- eval_util_L(list_cond_L(budget = 1E5,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   fit),                       fit)) #>   budget lambda1 lambda2 K          N  Utility #> 1  1e+05    0.01    5000 1 4500000.00 19.95200 #> 2  1e+05    0.01    5000 2 2000000.00 19.99588 #> 3  1e+05    0.01    5000 3 1166666.67 19.99912 #> 4  1e+05    0.01    5000 4  750000.00 19.99975 #> 5  1e+05    0.01    5000 5  500000.00 19.99963 #> 6  1e+05    0.01    5000 6  333333.33 20.00000 #> 7  1e+05    0.01    5000 7  214285.71 20.00000 #> 8  1e+05    0.01    5000 8  125000.00 20.00000 #> 9  1e+05    0.01    5000 9   55555.56 20.00000  # K values restricted (util3 <- eval_util_L(list_cond_L(budget = 1E5,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   fit,                                   K = 1:5),                       fit)) #>   budget lambda1 lambda2 K       N  Utility #> 1  1e+05    0.01    5000 1 4500000 19.95175 #> 2  1e+05    0.01    5000 2 2000000 19.99600 #> 3  1e+05    0.01    5000 3 1166667 19.99850 #> 4  1e+05    0.01    5000 4  750000 19.99963 #> 5  1e+05    0.01    5000 5  500000 19.99963  # theta and phi values supplied (util4 <- eval_util_L(list_cond_L(budget = 1E5,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   fit,                                   K = 1:5),                       fit,                       theta = array(0.5, dim = c(4000, I, J)),                       phi = array(1, dim = c(4000, I, J)))) #>   budget lambda1 lambda2 K       N  Utility #> 1  1e+05    0.01    5000 1 4500000  9.96600 #> 2  1e+05    0.01    5000 2 2000000 15.00973 #> 3  1e+05    0.01    5000 3 1166667 17.49592 #> 4  1e+05    0.01    5000 4  750000 18.73355 #> 5  1e+05    0.01    5000 5  500000 19.36387  # z, theta, and phi values, but no fit object supplied (util5 <- eval_util_L(list_cond_L(budget = 1E5,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   fit,                                   K = 1:5),                       fit = NULL,                       z = array(1, dim = c(4000, I, J)),                       theta = array(0.5, dim = c(4000, I, J)),                       phi = array(1, dim = c(4000, I, J)))) #>   budget lambda1 lambda2 K       N   Utility #> 1  1e+05    0.01    5000 1 4500000  9.990594 #> 2  1e+05    0.01    5000 2 2000000 14.971293 #> 3  1e+05    0.01    5000 3 1166667 17.508238 #> 4  1e+05    0.01    5000 4  750000 18.746519 #> 5  1e+05    0.01    5000 5  500000 19.383884 # }"},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected utility for regional species diversity assessments. — eval_util_R","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"eval_util_R() evaluates expected utility regional species diversity assessment using Monte Carlo integration.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"","code":"eval_util_R(   settings,   fit = NULL,   psi = NULL,   theta = NULL,   phi = NULL,   N_rep = 1,   cores = 1L )"},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"settings data frame specifies set conditions utility evaluated. must include columns named J, K, N, specify number sites, number replicates per site, sequencing depth per replicate, respectively. J, K, N must numeric vectors greater 0. J K contain decimal values, discarded treated integers. Additional columns ignored, may included. fit occumbFit object. psi Sample values site occupancy probabilities species stored matrix sample \\(\\times\\) species dimensions array sample \\(\\times\\) species \\(\\times\\) site dimensions. theta Sample values sequence capture probabilities species stored matrix sample \\(\\times\\) species dimensions array sample \\(\\times\\) species \\(\\times\\) site dimensions. phi Sample values sequence relative dominance species stored matrix sample \\(\\times\\) species dimensions array sample \\(\\times\\) species \\(\\times\\) site dimensions. N_rep Controls sample size Monte Carlo integration. integral evaluated using total N_sample * N_rep random samples, N_sample maximum size MCMC sample fit argument parameter sample psi, theta, phi arguments. cores number cores use parallelization.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"data frame column named Utility estimates expected utility stored. obtained adding Utility column data frame provided settings argument.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"utility regional species diversity assessment can defined number species expected detected region interest (Fukaya et al. 2022). eval_util_R() evaluates utility region modeled occumbFit object combination J, K, N values specified conditions argument. evaluations can used balance J, K, N maximize utility constant budget (possible combinations J, K, N specified budget cost values easily obtained using list_cond_R(); see example ). also possible examine utility varies different J, K, N values without setting budget level, may useful determining satisfactory levels J, K, N purely technical point view. expected utility defined expected value conditional utility form: $$U(J, K, N \\mid \\boldsymbol{r}, \\boldsymbol{u}) = \\sum_{= 1}^{}\\left\\{1 - \\prod_{j = 1}^{J}\\prod_{k = 1}^{K}\\left(1 - \\frac{u_{ijk}r_{ijk}}{\\sum_{m = 1}^{}u_{mjk}r_{mjk}} \\right)^N \\right\\}$$ \\(u_{ijk}\\) latent indicator variable representing inclusion sequence species \\(\\) replicate \\(k\\) site \\(j\\), \\(r_{ijk}\\) latent variable proportional relative frequency sequence species \\(\\), conditional presence replicate \\(k\\) site \\(j\\) (Fukaya et al. 2022). Expectations taken respect posterior (possibly prior) predictive distributions \\(\\boldsymbol{r} = \\{r_{ijk}\\}\\) \\(\\boldsymbol{u} = \\{u_{ijk}\\}\\), evaluated numerically using Monte Carlo integration. predictive distributions \\(\\boldsymbol{r}\\) \\(\\boldsymbol{u}\\) depend model parameters \\(\\psi\\), \\(\\theta\\), \\(\\phi\\) values. posterior (prior) distribution specified supplying occumbFit object containing posterior samples via fit argument, supplying matrix array posterior (prior) samples parameter values via psi, theta, phi arguments. Higher approximation accuracy can obtained increasing value N_rep. eval_util_R() function can executed supplying fit argument without specifying psi, theta, phi arguments, supplying three psi, theta, phi arguments without fit argument, supplying fit argument psi, theta, phi arguments. psi, theta, phi arguments specified addition fit, parameter values given arguments preferentially used evaluate expected utility. sample sizes differed among parameters, parameters smaller sample sizes resampled replacements align sample sizes across parameters. expected utility evaluated assuming homogeneity replicates, sense \\(\\theta\\) \\(\\phi\\), model parameters associated species detection process, constant across replicates within site. reason, eval_util_R() accept replicate-specific \\(\\theta\\) \\(\\phi\\). occumbFit object supplied fit argument replicate-specific parameter, parameter samples used utility evaluation must provided explicitly via theta phi arguments. parameters modeled function site covariates fit object, psi, theta, /phi arguments site dimensions, expected utility evaluated account site heterogeneity parameters. incorporate site heterogeneity, parameter values J site determined selecting site-specific parameter values fit, supplied psi, theta, phi via random sampling replacement. Thus, expected utility evaluated assuming set supplied parameter values statistical population site-specific parameters. Monte Carlo integration executed parallel multiple CPU cores, cores argument controls degree parallelization.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki T. Kadoya (2022) Multispecies site occupancy modelling study design spatially replicated environmental DNA metabarcoding. Methods Ecology Evolution 13:183–193. doi:10.1111/2041-210X.13732","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"","code":"# \\donttest{ set.seed(1)  # Generate a random dataset (20 species * 2 sites * 2 reps) I <- 20 # Number of species J <- 2  # Number of sites K <- 2  # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)))  # Fitting a null model fit <- occumb(data = data) #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 229 #>    Total graph size: 673 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.   ## Estimate expected utility # Arbitrary J, K, and N values (util1 <- eval_util_R(expand.grid(J = 1:3, K = 1:3, N = c(1E3, 1E4, 1E5)),                       fit)) #>    J K     N  Utility #> 1  1 1 1e+03 19.80640 #> 2  2 1 1e+03 19.97425 #> 3  3 1 1e+03 19.99291 #> 4  1 2 1e+03 19.88613 #> 5  2 2 1e+03 19.97950 #> 6  3 2 1e+03 19.99450 #> 7  1 3 1e+03 19.88699 #> 8  2 3 1e+03 19.98400 #> 9  3 3 1e+03 19.99450 #> 10 1 1 1e+04 19.84006 #> 11 2 1 1e+04 19.97569 #> 12 3 1 1e+04 19.99100 #> 13 1 2 1e+04 19.89600 #> 14 2 2 1e+04 19.97875 #> 15 3 2 1e+04 19.99200 #> 16 1 3 1e+04 19.89425 #> 17 2 3 1e+04 19.98425 #> 18 3 3 1e+04 19.99150 #> 19 1 1 1e+05 19.84624 #> 20 2 1 1e+05 19.97525 #> 21 3 1 1e+05 19.99075 #> 22 1 2 1e+05 19.88575 #> 23 2 2 1e+05 19.97850 #> 24 3 2 1e+05 19.99250 #> 25 1 3 1e+05 19.88675 #> 26 2 3 1e+05 19.97975 #> 27 3 3 1e+05 19.99325  # J, K, and N values under specified budget and cost (util2 <- eval_util_R(list_cond_R(budget = 50000,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   lambda3 = 5000),                       fit)) #>    budget lambda1 lambda2 lambda3 J K          N  Utility #> 1   50000    0.01    5000    5000 1 1 4000000.00 19.83575 #> 2   50000    0.01    5000    5000 2 1 1500000.00 19.97650 #> 3   50000    0.01    5000    5000 3 1  666666.67 19.99425 #> 4   50000    0.01    5000    5000 4 1  250000.00 19.99675 #> 5   50000    0.01    5000    5000 1 2 1750000.00 19.89075 #> 6   50000    0.01    5000    5000 2 2  500000.00 19.98075 #> 7   50000    0.01    5000    5000 3 2   83333.33 19.99250 #> 8   50000    0.01    5000    5000 1 3 1000000.00 19.89250 #> 9   50000    0.01    5000    5000 2 3  166666.67 19.98100 #> 10  50000    0.01    5000    5000 1 4  625000.00 19.89600 #> 11  50000    0.01    5000    5000 1 5  400000.00 19.88925 #> 12  50000    0.01    5000    5000 1 6  250000.00 19.90025 #> 13  50000    0.01    5000    5000 1 7  142857.14 19.89300 #> 14  50000    0.01    5000    5000 1 8   62500.00 19.88900  # K values restricted (util3 <- eval_util_R(list_cond_R(budget = 50000,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   lambda3 = 5000,                                   K = 1:5),                       fit)) #>    budget lambda1 lambda2 lambda3 J K          N  Utility #> 1   50000    0.01    5000    5000 1 1 4000000.00 19.85850 #> 2   50000    0.01    5000    5000 2 1 1500000.00 19.97550 #> 3   50000    0.01    5000    5000 3 1  666666.67 19.99100 #> 4   50000    0.01    5000    5000 4 1  250000.00 19.99500 #> 5   50000    0.01    5000    5000 1 2 1750000.00 19.90200 #> 6   50000    0.01    5000    5000 2 2  500000.00 19.97850 #> 7   50000    0.01    5000    5000 3 2   83333.33 19.99400 #> 8   50000    0.01    5000    5000 1 3 1000000.00 19.88375 #> 9   50000    0.01    5000    5000 2 3  166666.67 19.98100 #> 10  50000    0.01    5000    5000 1 4  625000.00 19.89225 #> 11  50000    0.01    5000    5000 1 5  400000.00 19.89425  # J and K values restricted (util4 <- eval_util_R(list_cond_R(budget = 50000,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   lambda3 = 5000,                                   J = 1:3, K = 1:5),                       fit)) #>    budget lambda1 lambda2 lambda3 J K          N  Utility #> 1   50000    0.01    5000    5000 1 1 4000000.00 19.84800 #> 2   50000    0.01    5000    5000 2 1 1500000.00 19.97450 #> 3   50000    0.01    5000    5000 3 1  666666.67 19.99100 #> 4   50000    0.01    5000    5000 1 2 1750000.00 19.88450 #> 5   50000    0.01    5000    5000 2 2  500000.00 19.97850 #> 6   50000    0.01    5000    5000 3 2   83333.33 19.99150 #> 7   50000    0.01    5000    5000 1 3 1000000.00 19.89500 #> 8   50000    0.01    5000    5000 2 3  166666.67 19.97900 #> 9   50000    0.01    5000    5000 1 4  625000.00 19.89375 #> 10  50000    0.01    5000    5000 1 5  400000.00 19.89575  # theta and phi values supplied (util5 <- eval_util_R(list_cond_R(budget = 50000,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   lambda3 = 5000,                                   J = 1:3, K = 1:5),                       fit,                       theta = array(0.5, dim = c(4000, I, J)),                       phi = array(1, dim = c(4000, I, J)))) #>    budget lambda1 lambda2 lambda3 J K          N  Utility #> 1   50000    0.01    5000    5000 1 1 4000000.00  9.97825 #> 2   50000    0.01    5000    5000 2 1 1500000.00 14.90850 #> 3   50000    0.01    5000    5000 3 1  666666.67 17.42767 #> 4   50000    0.01    5000    5000 1 2 1750000.00 14.88425 #> 5   50000    0.01    5000    5000 2 2  500000.00 18.71124 #> 6   50000    0.01    5000    5000 3 2   83333.33 19.66727 #> 7   50000    0.01    5000    5000 1 3 1000000.00 17.42300 #> 8   50000    0.01    5000    5000 2 3  166666.67 19.65025 #> 9   50000    0.01    5000    5000 1 4  625000.00 18.66550 #> 10  50000    0.01    5000    5000 1 5  400000.00 19.25875  # psi, theta, and phi values, but no fit object supplied (util6 <- eval_util_R(list_cond_R(budget = 50000,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   lambda3 = 5000,                                   J = 1:3, K = 1:5),                       fit = NULL,                       psi = array(0.9, dim = c(4000, I, J)),                       theta = array(0.9, dim = c(4000, I, J)),                       phi = array(1, dim = c(4000, I, J)))) #>    budget lambda1 lambda2 lambda3 J K          N  Utility #> 1   50000    0.01    5000    5000 1 1 4000000.00 16.18223 #> 2   50000    0.01    5000    5000 2 1 1500000.00 19.28467 #> 3   50000    0.01    5000    5000 3 1  666666.67 19.86450 #> 4   50000    0.01    5000    5000 1 2 1750000.00 17.79325 #> 5   50000    0.01    5000    5000 2 2  500000.00 19.76721 #> 6   50000    0.01    5000    5000 3 2   83333.33 19.97950 #> 7   50000    0.01    5000    5000 1 3 1000000.00 17.99450 #> 8   50000    0.01    5000    5000 2 3  166666.67 19.80000 #> 9   50000    0.01    5000    5000 1 4  625000.00 17.97675 #> 10  50000    0.01    5000    5000 1 5  400000.00 17.98575 # }"},{"path":"https://fukayak.github.io/occumb/dev/reference/fish.html","id":null,"dir":"Reference","previous_headings":"","what":"Fish eDNA metabarcoding dataset — fish","title":"Fish eDNA metabarcoding dataset — fish","text":"dataset fish eDNA metabarcoding collected Kasumigaura watershed, Japan.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fish eDNA metabarcoding dataset — fish","text":"","code":"fish"},{"path":"https://fukayak.github.io/occumb/dev/reference/fish.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fish eDNA metabarcoding dataset — fish","text":"occumbData class object containing sequence read count y, species covariate mismatch, site covariate riverbank. mismatch represents total number mismatched bases priming region forward reverse primers species. riverbank indicates whether riverbank site lacks aquatic riparian vegetation. Sequence reads obtained three replicates (collected center river near left right riverbanks) 50 sites across watershed, read counts six samples missing. resulting sequence counts 50 freshwater fish taxa recorded.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fish eDNA metabarcoding dataset — fish","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki, T. Kadoya (2021) Data : Multispecies site occupancy modeling study design spatially replicated environmental DNA metabarcoding. Dryad Digital Repository. doi:10.5061/dryad.3bk3j9kkm","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Fish eDNA metabarcoding dataset — fish_raw","title":"Fish eDNA metabarcoding dataset — fish_raw","text":"dataset fish eDNA metabarcoding collected Kasumigaura watershed, Japan.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fish eDNA metabarcoding dataset — fish_raw","text":"","code":"fish_raw"},{"path":"https://fukayak.github.io/occumb/dev/reference/fish_raw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fish eDNA metabarcoding dataset — fish_raw","text":"list containing array sequence read count, y, vector total number mismatched bases priming region forward reverse primers species, mismatch, factor indicating whether riverbank site lacked aquatic riparian vegetation, riverbank. Sequence reads obtained three replicates (collected center river near left right riverbanks) 50 sites across watershed, read counts six samples missing. resulting sequence counts 50 freshwater fish taxa detected recorded.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish_raw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fish eDNA metabarcoding dataset — fish_raw","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki, T. Kadoya (2021) Data : Multispecies site occupancy modeling study design spatially replicated environmental DNA metabarcoding. Dryad Digital Repository. doi:10.5061/dryad.3bk3j9kkm","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"get_post_samples() extracts posterior samples specified parameters model-fit object. get_post_summary() extracts posterior summary specified parameters model-fit object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"","code":"get_post_samples(   fit,   parameter = c(\"z\", \"pi\", \"phi\", \"theta\", \"psi\", \"alpha\", \"beta\", \"gamma\",     \"alpha_shared\", \"beta_shared\", \"gamma_shared\", \"Mu\", \"sigma\", \"rho\") )  get_post_summary(   fit,   parameter = c(\"z\", \"pi\", \"phi\", \"theta\", \"psi\", \"alpha\", \"beta\", \"gamma\",     \"alpha_shared\", \"beta_shared\", \"gamma_shared\", \"Mu\", \"sigma\", \"rho\") )"},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"fit occumbFit object. parameter string parameter name. See Details possible choices corresponding parameters.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"get_post_samples() returns vector, matrix, array posterior samples selected parameter. get_post_summary() returns table (matrix) posterior summary selected parameters. elements posterior summary obtained jags() function jagsUI package: include mean, standard deviation, percentiles posterior samples; Rhat statistic; effective sample size, n.eff; overlap0, checks 0 falls parameter's 95% credible interval; proportion posterior sign mean, f. dimension label attributes output object provide information regarding dimensions parameter.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"functions return posterior samples summary one following parameters model, stored model-fit object fit: z Site occupancy status species. pi Multinomial probabilities species sequence read counts. phi Sequence relative dominance species. theta Sequence capture probabilities species. psi Site occupancy probabilities species. alpha Species-specific effects sequence relative dominance (phi). beta Species-specific effects sequence capture probabilities (theta). gamma Species-specific effects site occupancy probabilities (psi). alpha_shared Effects sequence relative dominance (phi) common across species. beta_shared Effects sequence capture probabilities (theta) common across species. gamma_shared Effects site occupancy probabilities (psi) common across species. Mu Community-level averages species-specific effects (alpha, beta, gamma). sigma Standard deviations species-specific effects (alpha, beta, gamma). rho Correlation coefficients species-specific effects (alpha, beta, gamma). See package vignette details parameters. parameter may dimensions corresponding species, sites, replicates, effects (covariates) dimension label attributes added output object inform dimensions. sequence read count data y species, site, replicate names appended dimnames attribute (see Details occumbData()), copied label attribute returned object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"","code":"# \\donttest{ # Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates y_named <- array(sample.int(I * J * K), dim = c(I, J, K)) dimnames(y_named) <- list(c(\"species 1\", \"species 2\"),                           c(\"site 1\", \"site 2\"), NULL) data_named <- occumbData(y = y_named)  # Fitting a null model fit <- occumb(data = data_named, n.iter = 10100) #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 31 #>    Total graph size: 133 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 100 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.   # Extract posterior samples (post_sample_z <- get_post_samples(fit, \"z\")) #> , , 1 #>  #>       [,1] [,2] #>  [1,]    1    1 #>  [2,]    1    1 #>  [3,]    1    1 #>  [4,]    1    1 #>  [5,]    1    1 #>  [6,]    1    1 #>  [7,]    1    1 #>  [8,]    1    1 #>  [9,]    1    1 #> [10,]    1    1 #> [11,]    1    1 #> [12,]    1    1 #> [13,]    1    1 #> [14,]    1    1 #> [15,]    1    1 #> [16,]    1    1 #> [17,]    1    1 #> [18,]    1    1 #> [19,]    1    1 #> [20,]    1    1 #> [21,]    1    1 #> [22,]    1    1 #> [23,]    1    1 #> [24,]    1    1 #> [25,]    1    1 #> [26,]    1    1 #> [27,]    1    1 #> [28,]    1    1 #> [29,]    1    1 #> [30,]    1    1 #> [31,]    1    1 #> [32,]    1    1 #> [33,]    1    1 #> [34,]    1    1 #> [35,]    1    1 #> [36,]    1    1 #> [37,]    1    1 #> [38,]    1    1 #> [39,]    1    1 #> [40,]    1    1 #>  #> , , 2 #>  #>       [,1] [,2] #>  [1,]    1    1 #>  [2,]    1    1 #>  [3,]    1    1 #>  [4,]    1    1 #>  [5,]    1    1 #>  [6,]    1    1 #>  [7,]    1    1 #>  [8,]    1    1 #>  [9,]    1    1 #> [10,]    1    1 #> [11,]    1    1 #> [12,]    1    1 #> [13,]    1    1 #> [14,]    1    1 #> [15,]    1    1 #> [16,]    1    1 #> [17,]    1    1 #> [18,]    1    1 #> [19,]    1    1 #> [20,]    1    1 #> [21,]    1    1 #> [22,]    1    1 #> [23,]    1    1 #> [24,]    1    1 #> [25,]    1    1 #> [26,]    1    1 #> [27,]    1    1 #> [28,]    1    1 #> [29,]    1    1 #> [30,]    1    1 #> [31,]    1    1 #> [32,]    1    1 #> [33,]    1    1 #> [34,]    1    1 #> [35,]    1    1 #> [36,]    1    1 #> [37,]    1    1 #> [38,]    1    1 #> [39,]    1    1 #> [40,]    1    1 #>  #> attr(,\"dimension\") #> [1] \"Sample\"  \"Species\" \"Site\"    #> attr(,\"label\") #> attr(,\"label\")$Sample #> NULL #>  #> attr(,\"label\")$Species #> [1] \"species 1\" \"species 2\" #>  #> attr(,\"label\")$Site #> [1] \"site 1\" \"site 2\" #>  # Look dimensions of the parameter attributes(post_sample_z) #> $dim #> [1] 40  2  2 #>  #> $dimension #> [1] \"Sample\"  \"Species\" \"Site\"    #>  #> $label #> $label$Sample #> NULL #>  #> $label$Species #> [1] \"species 1\" \"species 2\" #>  #> $label$Site #> [1] \"site 1\" \"site 2\" #>  #>   # Extract posterior summary (post_summary_z <- get_post_summary(fit, \"z\")) #>        mean sd 2.5% 25% 50% 75% 97.5% Rhat n.eff overlap0 f #> z[1,1]    1  0    1   1   1   1     1   NA     1        0 1 #> z[2,1]    1  0    1   1   1   1     1   NA     1        0 1 #> z[1,2]    1  0    1   1   1   1     1   NA     1        0 1 #> z[2,2]    1  0    1   1   1   1     1   NA     1        0 1 #> attr(,\"dimension\") #> [1] \"Species\" \"Site\"    #> attr(,\"label\") #> attr(,\"label\")$Species #> [1] \"species 1\" \"species 2\" #>  #> attr(,\"label\")$Site #> [1] \"site 1\" \"site 2\" #>  # Look dimensions of the parameter attributes(post_summary_z) #> $dim #> [1]  4 11 #>  #> $dimnames #> $dimnames[[1]] #> [1] \"z[1,1]\" \"z[2,1]\" \"z[1,2]\" \"z[2,2]\" #>  #> $dimnames[[2]] #>  [1] \"mean\"     \"sd\"       \"2.5%\"     \"25%\"      \"50%\"      \"75%\"      #>  [7] \"97.5%\"    \"Rhat\"     \"n.eff\"    \"overlap0\" \"f\"        #>  #>  #> $dimension #> [1] \"Species\" \"Site\"    #>  #> $label #> $label$Species #> [1] \"species 1\" \"species 2\" #>  #> $label$Site #> [1] \"site 1\" \"site 2\" #>  #>  # }"},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness-of-fit assessment of the fitted model. — gof","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"gof() calculates omnibus discrepancy measures Bayesian \\(p\\)-values fitted model using posterior predictive check approach.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"","code":"gof(   fit,   stats = c(\"Freeman_Tukey\", \"deviance\", \"chi_squared\"),   cores = 1L,   plot = TRUE,   ... )"},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"fit occumbFit object. stats discrepancy statistics applied. cores number cores use parallelization. plot Logical, determine draw scatter plots fit statistics. ... Additional arguments passed default plot method.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"list following named elements: stats discrepancy statistics applied. p_value Bayesian \\(p\\)-value. stats_obs Discrepancy statistics observed data. stats_rep Discrepancy statistics repeated data.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"discrepancy statistic fitted model obtained using posterior predictive checking procedure. following statistics currently available: Freeman-Tukey statistics (default) \\(T_{\\textrm{FT}} = \\sum_{,j,k}\\left(\\sqrt{y_{ijk}} - \\sqrt{E(y_{ijk} \\mid \\pi_{ijk})}\\right)^2\\) Deviance statistics \\(T_{\\textrm{deviance}} = -2 \\sum_{j,k} \\log \\textrm{Multinomial}(\\boldsymbol{y}_{jk} \\mid \\boldsymbol{\\pi}_{jk})\\) Chi-squared statistics \\(T_{\\chi^2} = \\sum_{,j,k}\\frac{\\left(y_{ijk} - E(y_{ijk} \\mid \\pi_{ijk})\\right)^2}{E(y_{ijk} \\mid \\pi_{ijk})}\\) \\(\\), \\(j\\), \\(k\\) subscripts species, site, replicate, respectively, \\(y_{ijk}\\) sequence read count data, \\(\\pi_{ijk}\\) multinomial cell probabilities sequence read counts, \\(E(y_{ijk} \\mid \\pi_{ijk})\\) expected value sequence read counts conditional cell probabilities, \\(\\log \\textrm{Multinomial}(\\boldsymbol{y}_{jk} \\mid \\boldsymbol{\\pi}_{jk})\\) multinomial log-likelihood sequence read counts replicate \\(k\\) site \\(j\\) conditional cell probabilities. Bayesian \\(p\\)-value estimated probability value discrepancy statistics replicated dataset extreme observed dataset. extreme Bayesian \\(p\\)-value may indicate inadequate model fit. See Gelman et al. (2014), Kéry Royle (2016), Conn et al. (2018) details procedures used posterior predictive checking. Computations can run parallel multiple CPU cores cores argument controls degree parallelization.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"P. B. Conn, D. S. Johnson, P. J. Williams, S. R. Melin M. B. Hooten. (2018) guide Bayesian model checking ecologists. Ecological Monographs 88:526–542. doi:10.1002/ecm.1314 . Gelman, J. B. Carlin, H. S. Stern D. B. Dunson, . Vehtari D. B. Rubin (2013) Bayesian Data Analysis. 3rd edition. Chapman Hall/CRC. http://www.stat.columbia.edu/~gelman/book/ M. Kéry J. . Royle (2016) Applied Hierarchical Modeling Ecology — Analysis Distribution, Abundance Species Richness R BUGS. Volume 1: Prelude Static Models. Academic Press. https://www.mbr-pwrc.usgs.gov/pubanalysis/keryroylebook/","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"","code":"# \\donttest{ # Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J),                     cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)))  # Fitting a null model fit <- occumb(data = data) #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 31 #>    Total graph size: 133 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.   # Goodness-of-fit assessment gof_result <- gof(fit)  gof_result #> Posterior predictive check for an occumbFit object: #>  Statistics: Freeman-Tukey  #>  p-value:    0.47175  #>  Discrepancy statistics for observed data:   1.18 (mean), 0.61 (sd)  #>  Discrepancy statistics for replicated data: 1.32 (mean), 1.1 (sd)  # }"},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditions for local assessment under certain budget and cost values. — list_cond_L","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"list_cond_L() constructs list possible local species diversity assessment conditions specified budget cost values.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"","code":"list_cond_L(budget, lambda1, lambda2, fit, K = NULL)"},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"budget numeric specifying budget amount. currency unit arbitrary must consistent lambda1 lambda2. lambda1 numeric specifying cost per sequence read high-throughput sequencing. currency unit arbitrary must consistent budget lambda2. lambda2 numeric specifying cost per replicate library preparation. currency unit arbitrary must consistent budget lambda1. fit occumbFit object. K optional vector manually specifying number replicates.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"data frame containing columns named budget, lambda1, lambda2, K, N.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"function can generate data frame object given settings argument eval_util_L(); see Examples eval_util_L(). default, outputs list feasible combinations values number replicates per site K sequencing depth per replicate N based given budget, cost values, number sites (identified reference fit object). resulting N can non-integer calculated simply assuming maximum value can obtained. obtain list subset possible K values given budget cost value, K argument used provide vector desired K values.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"list_cond_R() constructs list possible regional species diversity assessment conditions specified budget cost values.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"","code":"list_cond_R(budget, lambda1, lambda2, lambda3, J = NULL, K = NULL)"},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"budget numeric specifying budget amount. currency unit arbitrary must consistent lambda1, lambda2, lambda3. lambda1 numeric specifying cost per sequence read high-throughput sequencing. currency unit arbitrary must consistent budget, lambda2, lambda3. lambda2 numeric specifying cost per replicate library preparation. currency unit arbitrary must consistent budget, lambda1, lambda3. lambda3 numeric specifying visiting cost per site. currency unit arbitrary must consistent budget, lambda1, lambda2. J optional vector manually specifying number sites K optional vector used specify number replicates manually. computational convenience, K values must ascending order.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"data frame containing columns named budget, lambda1, lambda2, lambda3, J, K, N.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"function can generate data frame object given settings argument eval_util_R(); see Examples eval_util_R(). default, outputs list feasible combinations values number sites J, number replicates per site K, sequencing depth per replicate N based given budget cost values. resulting N can non-integer calculated simply assuming maximum value can obtained. one wants obtain list subset possible values J K given budget cost value, use J /K arguments (fact, recommended relatively small number K values specified using K argument list conditions achievable moderate budget cost values can large, rarely practical vast number replicates per site). given combination J K values feasible specified budget cost values, combination ignored excluded output.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-fitting function. — occumb","title":"Model-fitting function. — occumb","text":"occumb() fits multispecies site-occupancy model eDNA metabarcoding (Fukaya et al. 2022) returns model-fit object containing posterior samples.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-fitting function. — occumb","text":"","code":"occumb(   formula_phi = ~1,   formula_theta = ~1,   formula_psi = ~1,   formula_phi_shared = ~1,   formula_theta_shared = ~1,   formula_psi_shared = ~1,   prior_prec = 1e-04,   prior_ulim = 10000,   data,   n.chains = 4,   n.adapt = NULL,   n.burnin = 10000,   n.thin = 10,   n.iter = 20000,   parallel = FALSE,   ... )"},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-fitting function. — occumb","text":"formula_phi right-hand side formula describing species-specific effects sequence relative dominance (\\(\\phi\\)). formula_theta right-hand side formula describing species-specific effects sequence capture probability (\\(\\theta\\)). formula_psi right-hand side formula describing species-specific effects occupancy probability (\\(\\psi\\)). formula_phi_shared right-hand side formula describing effects sequence relative dominance (\\(\\phi\\)) common across species. intercept term ignored (see Details). formula_theta_shared right-hand side formula describing effects sequence capture probability (\\(\\theta\\)) common across species. intercept term ignored (see Details). formula_psi_shared right-hand side formula describing effects occupancy probability (\\(\\psi\\)) common across species. intercept term ignored (see Details). prior_prec Precision normal prior distribution community-level average species-specific parameters effects common across species. prior_ulim Upper limit uniform prior distribution standard deviation species-specific parameters. data dataset supplied occumbData class object. n.chains Number Markov chains run. n.adapt Number iterations run JAGS adaptive phase. n.burnin Number iterations beginning chain discard. n.thin Thinning rate. Must positive integer. n.iter Total number iterations per chain (including burn-). parallel TRUE, run MCMC chains parallel multiple CPU cores. ... Additional arguments passed jags() function.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-fitting function. — occumb","text":"S4 object occumbFit class containing results model fitting supplied dataset.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model-fitting function. — occumb","text":"occumb() allows fitting range multispecies site occupancy models, including covariates different levels data generation process. general form model can written follows (notation follows original article; see References). Sequence read counts: $$(y_{1jk}, ..., y_{Ijk}) \\sim \\textrm{Multinomial}((\\pi_{1jk}, ...,  \\pi_{Ijk}), N_{jk}),$$ $$\\pi_{ijk} = \\frac{u_{ijk}r_{ijk}}{\\sum_m u_{mjk}r_{mjk}},$$ Relative frequency species sequences: $$r_{ijk} \\sim \\textrm{Gamma}(\\phi_{ijk}, 1),$$ Capture species sequences: $$u_{ijk} \\sim \\textrm{Bernoulli}(z_{ij}\\theta_{ijk}),$$ Site occupancy species: $$z_{ij} \\sim \\textrm{Bernoulli}(\\psi_{ij}),$$ variations \\(\\phi\\), \\(\\theta\\), \\(\\psi\\) modeled specifying model formulas formula_phi, formula_theta, formula_psi, formula_phi_shared, formula_theta_shared, formula_psi_shared. parameter may species-specific effects effects common across species, former specified formula_phi, formula_theta, formula_psi, whereas formula_phi_shared, formula_theta_shared, formula_psi_shared specify latter. species-specific intercepts specified default, intercept terms formula_phi_shared, formula_theta_shared, formula_psi_shared always ignored. Covariate terms must found names list elements stored spec_cov, site_cov, repl_cov slots dataset object provided data argument. Covariates modeled using log link function \\(\\phi\\) logit link function \\(\\theta\\) \\(\\psi.\\) two arguments, prior_prec prior_ulim, control prior distribution parameters. community-level average species-specific effects effects common across species, normal prior distribution mean 0 precision (.e., inverse variance) prior_prec specified. standard deviation species-specific effects, uniform prior distribution lower limit zero upper limit prior_ulim specified. correlation coefficient species-specific effects, uniform prior distribution range \\(-\\)1 1 specified default. See package vignette details model specifications occumb(). data argument requires dataset object generated using ocumbData(); see document occumbData(). model fit using jags() function jagsUI package, Markov chain Monte Carlo methods used obtain posterior samples parameters latent variables. Arguments n.chains, n.adapt, n.burnin, n.thin, n.iter, parallel passed arguments name jags() function. See document jagsUI's jags() function details.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model-fitting function. — occumb","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki T. Kadoya (2022) Multispecies site occupancy modelling study design spatially replicated environmental DNA metabarcoding. Methods Ecology Evolution 13:183–193. doi:10.1111/2041-210X.13732","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-fitting function. — occumb","text":"","code":"# Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J),                     cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)))  # \\donttest{ # Fitting a null model (includes only species-specific intercepts) res0 <- occumb(data = data) #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 31 #>    Total graph size: 133 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.   # Add species-specific effects of site covariates in occupancy probabilities res1 <- occumb(formula_psi = ~ cov2, data = data)        # Continuous covariate #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 36 #>    Total graph size: 156 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.  res2 <- occumb(formula_psi = ~ cov3, data = data)        # Categorical covariate #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 36 #>    Total graph size: 156 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.  res3 <- occumb(formula_psi = ~ cov2 * cov3, data = data) # Interaction #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 49 #>    Total graph size: 190 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.   # Add species covariate in the three parameters # Note that species covariates are modeled as common effects res4 <- occumb(formula_phi_shared = ~ cov1, data = data)   # phi #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 32 #>    Total graph size: 141 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.  res5 <- occumb(formula_theta_shared = ~ cov1, data = data) # theta #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 32 #>    Total graph size: 141 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.  res6 <- occumb(formula_psi_shared = ~ cov1, data = data)   # psi #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 32 #>    Total graph size: 141 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.   # Add replicate covariates # Note that replicate covariates can only be specified for theta and phi res7 <- occumb(formula_phi = ~ cov4, data = data)   # phi #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 36 #>    Total graph size: 170 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.  res8 <- occumb(formula_theta = ~ cov4, data = data) # theta #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 36 #>    Total graph size: 174 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 10000 iterations x 4 chains  #>   #>  #> Sampling from joint posterior, 10000 iterations x 4 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.   # Specify the prior distribution and MCMC settings explicitly res9 <- occumb(data = data, prior_prec = 1E-2, prior_ulim = 1E2,                n.chains = 1, n.burnin = 1000, n.thin = 1, n.iter = 2000) #>  #> Processing function input.......  #>  #> Done.  #>   #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 4 #>    Unobserved stochastic nodes: 31 #>    Total graph size: 133 #>  #> Initializing model #>  #> Adaptive phase.....  #> Adaptive phase complete  #>   #>  #>  Burn-in phase, 1000 iterations x 1 chains  #>   #>  #> Sampling from joint posterior, 1000 iterations x 1 chains  #>   #>  #> Calculating statistics.......  #>  #> Done.  res10 <- occumb(data = data, parallel = TRUE, n.cores = 2) # Run MCMC in parallel #>  #> Processing function input.......  #>  #> Done.  #>   #> Beginning parallel processing using 2 cores. Console output will be suppressed. #>  #> Parallel processing completed. #>  #> Calculating statistics.......  #>  #> Done.  # }"},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for occumbData data class. — occumbData","title":"Constructor for occumbData data class. — occumbData","text":"occumbData() creates data list compatible model fitting function occumb().","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for occumbData data class. — occumbData","text":"","code":"occumbData(y, spec_cov = NULL, site_cov = NULL, repl_cov = NULL)"},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for occumbData data class. — occumbData","text":"y 3-D array sequence read counts (integer values) may dimnames attribute. dimensions ordered species, site, replicate. data missing replicates represented zero vectors. NAs allowed. spec_cov named list species covariates. covariate can vector continuous (numeric integer) discrete (logical, factor, character) variables whose length dim(y)[1] (.e., number species). NAs allowed. site_cov named list site covariates. covariate can vector continuous (numeric integer) discrete (logical, factor, character) variables whose length dim(y)[1] (.e., number sites). NAs allowed. repl_cov named list replicate covariates. covariate can matrix continuous (numeric integer) discrete (logical character) variables dimensions equal dim(y)[2:3] (.e., number sites \\(\\times\\) number replicates). NAs allowed.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for occumbData data class. — occumbData","text":"S4 object occumbData class.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for occumbData data class. — occumbData","text":"element (.e., covariate) names spec_cov, site_cov, repl_cov must unique. y dimnames attribute, retained resulting occumbData object, can referenced subsequent analyses.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for occumbData data class. — occumbData","text":"","code":"# Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J), cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)) )  # A case for named y (with species and site names) y_named <- array(sample.int(I * J * K), dim = c(I, J, K)) dimnames(y_named) <- list(c(\"common species\", \"uncommon species\"),                           c(\"good site\", \"bad site\"), NULL) data_named <- occumbData(     y = y_named,     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J), cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)) )  # A real data example data(fish_raw) fish <- occumbData(     y = fish_raw$y,     spec_cov = list(mismatch = fish_raw$mismatch),     site_cov = list(riverbank = fish_raw$riverbank) )  # Get an overview of the datasets summary(data) #> Sequence read counts:  #>  Number of species, I = 2  #>  Number of sites, J = 2  #>  Maximum number of replicates per site, K = 2  #>  Number of missing observations = 0  #>  Number of replicates per site: 2 (average), 0 (sd)  #>  Sequencing depth: 9 (average), 4.2 (sd)  #>  #> Species covariates:  #>  cov1 (continuous)  #> Site covariates:  #>  cov2 (continuous), cov3 (categorical)  #> Replicate covariates:  #>  cov4 (continuous)  #>  #> Labels for species:  #>  (None)  #> Labels for sites:  #>  (None)  #> Labels for replicates:  #>  (None)  summary(data_named) #> Sequence read counts:  #>  Number of species, I = 2  #>  Number of sites, J = 2  #>  Maximum number of replicates per site, K = 2  #>  Number of missing observations = 0  #>  Number of replicates per site: 2 (average), 0 (sd)  #>  Sequencing depth: 9 (average), 3.5 (sd)  #>  #> Species covariates:  #>  cov1 (continuous)  #> Site covariates:  #>  cov2 (continuous), cov3 (categorical)  #> Replicate covariates:  #>  cov4 (continuous)  #>  #> Labels for species:  #>  common species, uncommon species  #> Labels for sites:  #>  good site, bad site  #> Labels for replicates:  #>  (None)  summary(fish) #> Sequence read counts:  #>  Number of species, I = 50  #>  Number of sites, J = 50  #>  Maximum number of replicates per site, K = 3  #>  Number of missing observations = 6  #>  Number of replicates per site: 2.88 (average), 0.33 (sd)  #>  Sequencing depth: 77910 (average), 98034.7 (sd)  #>  #> Species covariates:  #>  mismatch (continuous)  #> Site covariates:  #>  riverbank (categorical)  #> Replicate covariates:  #>  (None)  #>  #> Labels for species:  #>  Abbottina rivularis, Acanthogobius lactipes, Acheilognathus macropterus, Acheilognathus rhombeus, Anguilla japonica, Biwia zezera, Carassius cuvieri, Carassius spp., Channa argus, Ctenopharyngodon idella, Cyprinus carpio, Gambusia affinis, Gnathopogon spp., Gymnogobius castaneus, Gymnogobius petschiliensis, Gymnogobius urotaenia, Hemibarbus spp., Hypomesus nipponensis, Hypophthalmichthys spp., Hyporhamphus intermedius, Ictalurus punctatus, Ischikauia steenackeri, Lepomis macrochirus macrochirus, Leucopsarion petersii, Megalobrama amblycephala, Micropterus dolomieu dolomieu, Micropterus salmoides, Misgurnus spp., Monopterus albus, Mugil cephalus cephalus, Mylopharyngodon piceus, Nipponocypris sieboldii, Nipponocypris temminckii, Opsariichthys platypus, Opsariichthys uncirostris uncirostris, Oryzias latipes, Plecoglossus altivelis altivelis, Pseudogobio spp., Pseudorasbora parva, Rhinogobius spp., Rhodeus ocellatus ocellatus, Salangichthys microdon, Sarcocheilichthys variegatus microoculus, Silurus asotus, Squalidus chankaensis biwae, Tachysurus tokiensis, Tanakia lanceolata, Tribolodon brandtii maruta, Tribolodon hakonensis, Tridentiger spp.  #> Labels for sites:  #>  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50  #> Labels for replicates:  #>  L, C, R"},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbFit-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for occumbFit class. — plot,occumbFit-method","title":"Plot method for occumbFit class. — plot,occumbFit-method","text":"Applies jagsUI's plot method occumbFit object draw trace plots density plots MCMC samples model parameters.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbFit-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for occumbFit class. — plot,occumbFit-method","text":"","code":"# S4 method for class 'occumbFit' plot(x, y = NULL, ...)"},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbFit-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for occumbFit class. — plot,occumbFit-method","text":"x occumbFit object. y NULL ... Additional arguments passed plot method jagsUI object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbFit-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for occumbFit class. — plot,occumbFit-method","text":"Returns NULL invisibly.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbGof-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for occumbGof class. — plot,occumbGof-method","title":"Plot method for occumbGof class. — plot,occumbGof-method","text":"Draws scatter plot fit statistics.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbGof-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for occumbGof class. — plot,occumbGof-method","text":"","code":"# S4 method for class 'occumbGof' plot(x, y = NULL, ...)"},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbGof-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for occumbGof class. — plot,occumbGof-method","text":"x occumbGof object. y NULL ... Additional arguments passed default plot method.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbGof-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for occumbGof class. — plot,occumbGof-method","text":"Returns NULL invisibly.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/predict-occumbFit-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for occumbFit class. — predict,occumbFit-method","title":"Predict method for occumbFit class. — predict,occumbFit-method","text":"Obtain predictions parameters related species occupancy detection occumbFit model object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/predict-occumbFit-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for occumbFit class. — predict,occumbFit-method","text":"","code":"# S4 method for class 'occumbFit' predict(   object,   newdata = NULL,   parameter = c(\"phi\", \"theta\", \"psi\"),   scale = c(\"response\", \"link\"),   type = c(\"quantiles\", \"mean\", \"samples\") )"},{"path":"https://fukayak.github.io/occumb/dev/reference/predict-occumbFit-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for occumbFit class. — predict,occumbFit-method","text":"object occumbFit object. newdata optional occumbData object covariates used prediction. omitted, fitted covariates used. parameter parameter predicted. scale scale prediction made. type = \"response\" returns prediction original scale parameter. type = \"link\" returns prediction link scale parameter. type type prediction. type = \"quantiles\" returns 50% quantile posterior median prediction addition 2.5 97.5% quantiles lower upper limits 95% credible interval prediction. type = \"mean\" returns posterior mean prediction. type = \"samples\" returns posterior samples prediction.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/predict-occumbFit-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict method for occumbFit class. — predict,occumbFit-method","text":"Predictions obtained matrix array can dimensions corresponding statistics (samples), species, sites, replicates. dimension label attributes added output object inform dimensions. sequence read count data y species, site, replicate names appended dimnames attribute (see Details occumbData()), copied label attribute returned object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/predict-occumbFit-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict method for occumbFit class. — predict,occumbFit-method","text":"Applying predict() occumbFit object generates predictions specified parameter (phi, theta, psi) based estimated effects given covariates. important recognize predictions specific individual species modeled since depend estimated species-specific effects (.e., alpha, beta, gamma; see package vignette details). providing newdata, must thus assumed set species contained newdata data fitted.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/summary-occumbData-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for occumbData class. — summary,occumbData-method","title":"Summary method for occumbData class. — summary,occumbData-method","text":"Summarizes dataset stored occumbData object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/summary-occumbData-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for occumbData class. — summary,occumbData-method","text":"","code":"# S4 method for class 'occumbData' summary(object)"},{"path":"https://fukayak.github.io/occumb/dev/reference/summary-occumbData-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for occumbData class. — summary,occumbData-method","text":"object occumbData object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/summary-occumbData-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for occumbData class. — summary,occumbData-method","text":"Returns NULL invisibly.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/summary-occumbFit-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for occumbFit class. — summary,occumbFit-method","title":"Summary method for occumbFit class. — summary,occumbFit-method","text":"Summarizes model fitting result stored occumbFit object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/summary-occumbFit-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for occumbFit class. — summary,occumbFit-method","text":"","code":"# S4 method for class 'occumbFit' summary(object)"},{"path":"https://fukayak.github.io/occumb/dev/reference/summary-occumbFit-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for occumbFit class. — summary,occumbFit-method","text":"object occumbFit object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/summary-occumbFit-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for occumbFit class. — summary,occumbFit-method","text":"Returns NULL invisibly.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version","dir":"Changelog","previous_headings":"","what":"occumb (development version)","title":"occumb (development version)","text":"Add test-coverage workflow Add snapshot tests plot() summary() Fix issue error message character covariates. Add stats = chi_squared option gof() Fix issue . covariates formula Fix issue throwing warning message instead error Change error message validate_occumbData Add test throw error integer large Add tests gof unbalanced designs Fix issue sigma’s default value.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-1","dir":"Changelog","previous_headings":"","what":"occumb 1.1.0 (2024/3/26)","title":"occumb (development version)","text":"Add predict() method occumbFit class. Fix summary() method occumbFit: longer outputs comments convergence DIC. Internal changes fix number known bugs, helpful messages, additional testing. Improved function documentation vignette.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-2","dir":"Changelog","previous_headings":"","what":"occumb 1.0.3 (2024/01/04)","title":"occumb (development version)","text":"Internal changes fix number known bugs, helpful error messages, additional testing. Improved function documentation.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-3","dir":"Changelog","previous_headings":"","what":"occumb 1.0.2 (2023/10/19)","title":"occumb (development version)","text":"Fix license issue: occumb licensed GPLv3. document fixes.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-4","dir":"Changelog","previous_headings":"","what":"occumb 1.0.1 (2023/09/21)","title":"occumb (development version)","text":"patch release fixes issues plot() summary() methods exported correctly. also improves gof() accept additional arguments figure formatting.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-5","dir":"Changelog","previous_headings":"","what":"occumb 1.0.0 (2023/09/14)","title":"occumb (development version)","text":"Add z, theta, phi arguments eval_util_L(). Add psi, theta, phi arguments eval_util_R(). Fix eval_util_R() account site-heterogeneity parameters. Remove loglik() function package. bug fixes, internal changes, document improvements.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-6","dir":"Changelog","previous_headings":"","what":"occumb 0.6.1 (2023/07/27)","title":"occumb (development version)","text":"Add model specification vignette. fixes improvements documentation.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-7","dir":"Changelog","previous_headings":"","what":"occumb 0.6.0 (2023/07/20)","title":"occumb (development version)","text":"Add package vignette. Add fish fish_raw data. Add occumbGof class. Add fix methods occumbData, occumbFit, occumbGof classes. Change defaults cores arguments gof(), eval_util_L(), eval_util_R() functions. bug fixes, internal changes, documentation improvements.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-8","dir":"Changelog","previous_headings":"","what":"occumb 0.5.1 (2023/04/27)","title":"occumb (development version)","text":"Add pkgdown website. bug fixes internal changes.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-9","dir":"Changelog","previous_headings":"","what":"occumb 0.5.0 (2023/04/26)","title":"occumb (development version)","text":"Add get_post_samples() get_post_summary() functions. Add option parallel computation gof() function. Fix bugs occumb() functions. Fix issue parallel computation eval_util_L() eval_util_R() functions Windows.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-10","dir":"Changelog","previous_headings":"","what":"occumb 0.4.2 (2022/12/13)","title":"occumb (development version)","text":"Fix issue parallel computation eval_util_L() eval_util_R() functions Windows.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-11","dir":"Changelog","previous_headings":"","what":"occumb 0.4.1 (2022/11/16)","title":"occumb (development version)","text":"Fix computational issues eval_util_L() eval_util_R() functions.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-12","dir":"Changelog","previous_headings":"","what":"occumb 0.4.0 (2022/06/03)","title":"occumb (development version)","text":"Add eval_util_L() eval_util_R() functions. Add list_cond_L() list_cond_R() functions.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-13","dir":"Changelog","previous_headings":"","what":"occumb 0.3.0 (2022/03/31)","title":"occumb (development version)","text":"Add gof() function. Add loglik() function. Add ... argument occumb() function. Add data field occumbFit class.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-14","dir":"Changelog","previous_headings":"","what":"occumb 0.2.1 (2021/11/21)","title":"occumb (development version)","text":"bug fixes. Add validations inputs occumb().","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-15","dir":"Changelog","previous_headings":"","what":"occumb 0.2.0 (2021/11/19)","title":"occumb (development version)","text":"Change occumbData class specification occumbData() function. Add occumb() function. Add methods occumbFit class: plot, print, summary.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version-16","dir":"Changelog","previous_headings":"","what":"occumb 0.1.0 (2021/9/10)","title":"occumb (development version)","text":"Initial development occumb package. Add occumbData() function.","code":""}]
