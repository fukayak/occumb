[{"path":"https://fukayak.github.io/occumb/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Keiichi Fukaya Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://fukayak.github.io/occumb/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Keiichi Fukaya. Author, maintainer.","code":""},{"path":"https://fukayak.github.io/occumb/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fukaya K (2023). occumb: Site Occupancy Modeling Environmental DNA Metabarcoding. R package version 0.5.1.9002, https://fukayak.github.io/occumb/.","code":"@Manual{,   title = {occumb: Site Occupancy Modeling For Environmental DNA Metabarcoding},   author = {Keiichi Fukaya},   year = {2023},   note = {R package version 0.5.1.9002},   url = {https://fukayak.github.io/occumb/}, }"},{"path":"https://fukayak.github.io/occumb/dev/index.html","id":"occumb-site-occupancy-modeling-for-environmental-dna-metabarcoding","dir":"","previous_headings":"","what":"Site Occupancy Modeling For Environmental DNA Metabarcoding","title":"Site Occupancy Modeling For Environmental DNA Metabarcoding","text":"occumb R package provides functionalities apply multispecies site occupancy modeling environmental DNA (eDNA) metabarcoding easily. package allows users fit model fully Bayesian approach, using conventional formulas R. enables analysis detectability species different stages workflow eDNA metabarcoding inference species site occupancy accounting false negatives. also provides functionality model-based inference assist optimization study design. See original paper details model inference.","code":""},{"path":"https://fukayak.github.io/occumb/dev/index.html","id":"important-note","dir":"","previous_headings":"","what":"Important note","title":"Site Occupancy Modeling For Environmental DNA Metabarcoding","text":"current programs alpha version released present concept package development. words, please aware following points want try package: planned features yet implemented. functions may thoroughly tested. Documentation may insufficient. Specifications may change significantly future.","code":""},{"path":"https://fukayak.github.io/occumb/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Site Occupancy Modeling For Environmental DNA Metabarcoding","text":"occumb relies JAGS run MCMC, need first install following instructions JAGS homepage. can install latest version occumb GitHub repository using install_github() function remotes package:","code":"remotes::install_github(\"fukayak/occumb\", ref = \"main\")"},{"path":"https://fukayak.github.io/occumb/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Site Occupancy Modeling For Environmental DNA Metabarcoding","text":"current version (v0.5.x) provides following main functions: occumbData() builds dataset object used multispecies site occupancy modeling. occumb() fits model, possibly species, site, replicate covariates. gof() computes statistics goodness--fit assessment model. loglik() extracts pointwise log-likelihood model. get_post_samples() get_post_summary extract posterior samples summary parameters model-fit object, respectively. eval_util_L() eval_util_R() predict expected utility (expected number detected species) local regional scales, respectively. See documentation function details.","code":"library(occumb)  # Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J),                     cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)))  # Fitting a null model (includes only species-specific intercepts) res0 <- occumb(data = data)  # occumb() fits the model using jags() in the jagsUI package. # You can thus get the same output as seen in the jagsUI results: res0 summary(res0) plot(res0)  # You can also extract posterior samples and posterior summaries of # specific parameters. # For example, the following lines get samples and summary for the # species site occupancy z: post_samples_z  <- get_post_samples(res0, \"z\") post_summary_z <- get_post_summary(res0, \"z\")  # Add species-specific effects of site covariates in occupancy probabilities res1 <- occumb(formula_psi = ~ cov2, data = data)        # Continuous covariate res2 <- occumb(formula_psi = ~ cov3, data = data)        # Categorical covariate res3 <- occumb(formula_psi = ~ cov2 * cov3, data = data) # Interaction  # Add species covariate in the three parameters # Note that species covariates are modeled as common effects res4 <- occumb(formula_phi_shared = ~ cov1, data = data)   # phi res5 <- occumb(formula_theta_shared = ~ cov1, data = data) # theta res6 <- occumb(formula_psi_shared = ~ cov1, data = data)   # psi  # Add replicate covariates # Note that replicate covariates can only be specified for theta and phi res7 <- occumb(formula_phi = ~ cov4, data = data)   # phi res8 <- occumb(formula_theta = ~ cov4, data = data) # theta  # Specify the prior distribution and MCMC settings explicitly res9 <- occumb(data = data, prior_prec = 1E-2, prior_ulim = 1E2,                n.chains = 1, n.burnin = 1000, n.thin = 1, n.iter = 2000) res10 <- occumb(data = data, parallel = TRUE) # Run MCMC in parallel  # Calculate goodness-of-fit statistics gof_res0 <- gof(res0)  # Extract pointwise log-likelihood ll_res0 <- loglik(res0)  # Estimate expected utility for local species diversity assessment util_L <- eval_util_L(list_cond_L(budget = 1E5, lambda1 = 0.01, lambda2 = 5000, res0),                       res0)  # Estimate expected utility for regional species diversity assessment util_R <- eval_util_R(list_cond_R(budget = 50000,                                   lambda1 = 0.01,                                   lambda2 = 5000,                                   lambda3 = 5000),                       res0)"},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected utility for local species diversity assessments. — eval_util_L","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"eval_util_L() evaluates expected utility local species diversity assessment using Monte Carlo integration.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"","code":"eval_util_L(settings, fit, N_rep = 1, cores = parallel::detectCores())"},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"settings data frame specifies set conditions utility evaluated. must include column named K N, specifies number replicates per site sequencing depth per replicate, respectively. K N must numeric vectors greater 0. K contains decimal, decimal part discarded treated integer. Additional columns ignored may included. fit occumbFit object containing posterior sample relevant parameters. N_rep Controls sample size Monte Carlo integration. integral evaluated using total N_sample * N_rep random samples, N_sample size MCMC sample provided fit. cores number cores use parallelization.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"data frame column named Utility estimates expected utility stored. obtained adding Utility column data frame provided settings argument.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"utility local species diversity assessment can defined, given set sites, expected number detected species per site (Fukaya et al. 2022). eval_util_L() evaluates utility set sites included occumbFit object (specifically, sites latent occupancy state \\(z\\) estimated) combination K N values specified conditions argument. evaluations can used balance K N maximize utility constant budget (possible combinations K N specified budget cost values easily obtained using list_cond_L(); see example ). also possible examine utility varies different K N values without setting budget level, may useful know satisfactory level K N purely technical point view. expected utility defined expected value conditional utility form: $$U(K, N \\mid \\boldsymbol{r}, \\boldsymbol{u}) = \\frac{1}{J}\\sum_{j = 1}^{J}\\sum_{= 1}^{}\\left\\{1 - \\prod_{k = 1}^{K}\\left(1 - \\frac{u_{ijk}r_{ijk}}{\\sum_{m = 1}^{}u_{mjk}r_{mjk}} \\right)^N \\right\\}$$ \\(u_{ijk}\\) latent indicator variable representing inclusion sequence species \\(\\) replicate \\(k\\) site \\(j\\) \\(r_{ijk}\\) latent variable proportional relative frequency sequence species \\(\\), conditional presence replicate \\(k\\) site \\(j\\) (Fukaya et al. 2022). Expectations taken respect posterior predictive distributions \\(\\boldsymbol{r} = \\{r_{ijk}\\}\\) \\(\\boldsymbol{u} = \\{u_{ijk}\\}\\), evaluated numerically Monte Carlo integration using MCMC samples occumbFit object. Higher approximation accuracy can obtained increasing value N_rep. expected utility evaluated assuming replicates homogeneous sense model parameters associated detection process constant across replicates. reason, current version, eval_util_L() applied supplied occumbFit object contains model replicate covariates. Monte Carlo integration executed parallel multiple CPU cores cores argument controls degree parallelization. default, cores available user's environment used.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki T. Kadoya (2022) Multispecies site occupancy modelling study design spatially replicated environmental DNA metabarcoding. Methods Ecology Evolution 13:183--193. https://doi.org/10.1111/2041-210X.13732","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_L.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected utility for local species diversity assessments. — eval_util_L","text":"","code":"if (FALSE) { # Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J),                     cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)))  # Fitting a null model fit <- occumb(data = data)  # Estimate expected utility util1 <- eval_util_L(data.frame(K = rep(1:3, each = 3),                                 N = rep(c(1E3, 1E4, 1E5), times = 3)),                      fit) # Arbitrary K and N values util2 <- eval_util_L(list_cond_L(budget = 1E5, lambda1 = 0.01, lambda2 = 5000, fit),                      fit) # K and N values under specified budget and cost util3 <- eval_util_L(list_cond_L(budget = 1E5, lambda1 = 0.01, lambda2 = 5000, fit,                                  K = 1:5),                      fit) # K values restricted }"},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected utility for regional species diversity assessments. — eval_util_R","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"eval_util_R() evaluates expected utility regional species diversity assessment using Monte Carlo integration.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"","code":"eval_util_R(settings, fit, N_rep = 1, cores = parallel::detectCores())"},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"settings data frame specifies set conditions utility evaluated. must include column named J, K, N, specifies number sites, number replicates per site, sequencing depth per replicate, respectively. J, K, N must numeric vectors greater 0. J K contains decimal, decimal part discarded treated integer. Additional columns ignored may included. fit occumbFit object containing posterior sample relevant parameters. N_rep Controls sample size Monte Carlo integration. integral evaluated using total N_sample * N_rep random samples, N_sample size MCMC sample provided fit. cores number cores use parallelization.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"data frame column named Utility estimates expected utility stored. obtained adding Utility column data frame provided settings argument.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"utility regional species diversity assessment can defined number species region interest expected detected (Fukaya et al. 2022). eval_util_R() evaluates utility region modeled occumbFit object combination J, K, N values specified conditions argument. evaluations can used balance J, K, N maximize utility constant budget (possible combinations J, K, N specified budget cost values easily obtained using list_cond_R(); see example ). also possible examine utility varies different J, K, N values without setting budget level, may useful know satisfactory level J, K, N purely technical point view. expected utility defined expected value conditional utility form: $$U(J, K, N \\mid \\boldsymbol{r}, \\boldsymbol{u}) = \\sum_{= 1}^{}\\left\\{1 - \\prod_{j = 1}^{J}\\prod_{k = 1}^{K}\\left(1 - \\frac{u_{ijk}r_{ijk}}{\\sum_{m = 1}^{}u_{mjk}r_{mjk}} \\right)^N \\right\\}$$ \\(u_{ijk}\\) latent indicator variable representing inclusion sequence species \\(\\) replicate \\(k\\) site \\(j\\) \\(r_{ijk}\\) latent variable proportional relative frequency sequence species \\(\\), conditional presence replicate \\(k\\) site \\(j\\) (Fukaya et al. 2022). Expectations taken respect posterior predictive distributions \\(\\boldsymbol{r} = \\{r_{ijk}\\}\\) \\(\\boldsymbol{u} = \\{u_{ijk}\\}\\), evaluated numerically Monte Carlo integration using MCMC samples occumbFit object. Higher approximation accuracy can obtained increasing value N_rep. expected utility evaluated assuming sites replicates homogeneous sense model parameters constant across sites replicates. reason, current version, eval_util_R() applied supplied occumbFit object contains model site replicate covariates. Monte Carlo integration executed parallel multiple CPU cores cores argument controls degree parallelization. default, cores available user's environment used.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki T. Kadoya (2022) Multispecies site occupancy modelling study design spatially replicated environmental DNA metabarcoding. Methods Ecology Evolution 13:183--193. https://doi.org/10.1111/2041-210X.13732","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/eval_util_R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected utility for regional species diversity assessments. — eval_util_R","text":"","code":"if (FALSE) { # Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J),                     cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)))  # Fitting a null model fit <- occumb(data = data)  # Estimate expected utility util1 <- eval_util_R(data.frame(J = rep(rep(1:3, each = 3), times = 3),                                 K = rep(rep(1:3, each = 3), each = 3),                                 N = rep(rep(c(1E3, 1E4, 1E5), times = 3), times = 3)),                      fit) # Arbitrary J, K, and N values util2 <- eval_util_R(list_cond_R(budget = 50000,                                  lambda1 = 0.01,                                  lambda2 = 5000,                                  lambda3 = 5000),                      fit) # J, K, and N values under specified budget and cost util3 <- eval_util_R(list_cond_R(budget = 50000,                                  lambda1 = 0.01,                                  lambda2 = 5000,                                  lambda3 = 5000,                                  K = 1:5),                      fit) # K values restricted util4 <- eval_util_R(list_cond_R(budget = 50000,                                  lambda1 = 0.01,                                  lambda2 = 5000,                                  lambda3 = 5000,                                  J = 1:3, K = 1:5),                      fit) # J and K values restricted }"},{"path":"https://fukayak.github.io/occumb/dev/reference/fish.html","id":null,"dir":"Reference","previous_headings":"","what":"Fish eDNA metabarcoding dataset — fish","title":"Fish eDNA metabarcoding dataset — fish","text":"dataset fish eDNA metabarcoding collected Kasumigaura watershed, Japan.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fish eDNA metabarcoding dataset — fish","text":"","code":"fish"},{"path":"https://fukayak.github.io/occumb/dev/reference/fish.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fish eDNA metabarcoding dataset — fish","text":"occumbData class object containing sequence read count y, mismatch species covariate, riverbank site covariate. mismatch represents total number mismatched bases priming region forward reverse primers species. riverbank indicates whether riverbank site lacks aquatic riparian vegetation. sequence reads obtained three replicates (collected center river near left right riverbanks, respectively) 50 sites across watershed, read counts 6 samples missing. resulting sequence counts 50 freshwater fish taxa detected recorded.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fish eDNA metabarcoding dataset — fish","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki, T. Kadoya (2021) Data : Multispecies site occupancy modeling study design spatially replicated environmental DNA metabarcoding. Dryad Digital Repository. https://doi.org/10.5061/dryad.3bk3j9kkm","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Fish eDNA metabarcoding dataset — fish_raw","title":"Fish eDNA metabarcoding dataset — fish_raw","text":"dataset fish eDNA metabarcoding collected Kasumigaura watershed, Japan.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fish eDNA metabarcoding dataset — fish_raw","text":"","code":"fish_raw"},{"path":"https://fukayak.github.io/occumb/dev/reference/fish_raw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fish eDNA metabarcoding dataset — fish_raw","text":"list containing array sequence read count y, vector total number mismatched bases priming region forward reverse primers species mismatch, factor indicating whether riverbank site lacks aquatic riparian vegetation riverbank. sequence reads obtained three replicates (collected center river near left right riverbanks, respectively) 50 sites across watershed, read counts 6 samples missing. resulting sequence counts 50 freshwater fish taxa detected recorded.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/fish_raw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fish eDNA metabarcoding dataset — fish_raw","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki, T. Kadoya (2021) Data : Multispecies site occupancy modeling study design spatially replicated environmental DNA metabarcoding. Dryad Digital Repository. https://doi.org/10.5061/dryad.3bk3j9kkm","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"get_post_samples() extracts posterior samples specified parameters model-fit object. get_post_summary() extracts posterior summary specified parameters model-fit object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"","code":"get_post_samples(   fit,   parameter = c(\"z\", \"pi\", \"phi\", \"theta\", \"psi\", \"alpha\", \"beta\", \"gamma\",     \"alpha_shared\", \"beta_shared\", \"gamma_shared\", \"Mu\", \"sigma\", \"rho\") )  get_post_summary(   fit,   parameter = c(\"z\", \"pi\", \"phi\", \"theta\", \"psi\", \"alpha\", \"beta\", \"gamma\",     \"alpha_shared\", \"beta_shared\", \"gamma_shared\", \"Mu\", \"sigma\", \"rho\") )"},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"fit occumbFit object. parameter string parameter name. See Details possible choices corresponding parameters.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"get_post_samples() returns vector, matrix, array posterior samples selected parameter. get_post_summary() returns table (matrix) posterior summary selected parameter. elements posterior summary obtained jags() function jagsUI package: include mean, standard deviation, percentiles posterior samples; overlap0 checks 0 falls parameter's 95% credible interval; proportion posterior sign mean, f; Rhat statistic; effective sample size, n.eff. dimension label attributes output object give information dimension parameter.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"functions return posterior samples summary one following parameters model, stored model-fit object fit: \"z\" Site occupancy status species. \"pi\" Multinomial probabilities species sequence read counts. \"phi\" Sequence relative dominance species. \"theta\" Sequence capture probabilities species. \"psi\" Site occupancy probabilities species. \"alpha\" Species-specific effects sequence relative dominance (phi). \"beta\" Species-specific effects sequence capture probabilities (theta). \"gamma\" Species-specific effects site occupancy probabilities (psi). \"alpha_shared\" Effects sequence relative dominance (phi) common across species. \"beta_shared\" Effects sequence capture probabilities (theta) common across species. \"gamma_shared\" Effects site occupancy probabilities (psi) common across species. \"Mu\" Community-level averages species-specific effects (alpha, beta, gamma). \"sigma\" Standard deviations species-specific effects (alpha, beta, gamma). \"rho\" Correlation coefficients species-specific effects (alpha, beta, gamma). See (xxx) details parameters. parameter may dimensions corresponding species, sites, replicates, effects (covariates): dimension label attributes added output object inform dimensions. sequence read count data y species, site, replicate names appended dimnames attribute (see Details occumbData()), copied label attribute returned object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/get_posterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract posterior samples or summary of parameters from a model-fit object. — get_posterior","text":"","code":"if (FALSE) { # Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates y_named <- array(sample.int(I * J * K), dim = c(I, J, K)) dimnames(y_named) <- list(c(\"common species\", \"uncommon species\"),                           c(\"good site\", \"bad site\"), NULL) data_named <- occumbData(     y = y_named,     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J),                     cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)))  # Fitting a null model fit <- occumb(data = data_named)  # Extract posterior samples (post_sample_z <- get_post_samples(fit, \"z\")) # Look dimensions of the parameter attributes(post_sample_z)  # Extract posterior summary (post_summary_z <- get_post_summary(fit, \"z\")) # Look dimensions of the parameter attributes(post_summary_z) }"},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness-of-fit assessment of the fitted model. — gof","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"gof() calculates omnibus discrepancy measures Bayesian \\(p\\)-values fitted model using posterior predictive check approach.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"","code":"gof(   fit,   stats = c(\"Freeman_Tukey\", \"deviance\"),   cores = parallel::detectCores(),   plot = TRUE )"},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"fit occumbFit object. stats discrepancy statistics applied. cores number cores use parallelization. plot Logical, determine draw scatter plots fit statistics.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"list following named elements: stats discrepancy statistics applied. p_value Bayesian \\(p\\)-value. stats_obs Discrepancy statistics observed data. stats_rep Discrepancy statistics repeated data.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"discrepancy statistic fitted model obtained using procedure posterior predictive checking. following statistics currently available: Freeman-Tukey statistics (default) \\(T(\\boldsymbol{y}, \\boldsymbol{\\theta}) = \\sum_{}\\sum_{j}\\sum_{k}\\left(\\sqrt{y_{ijk}} - \\sqrt{E(y_{ijk} \\mid \\boldsymbol{\\theta})}\\right)^2\\) Deviance statistics \\(T(\\boldsymbol{y}, \\boldsymbol{\\theta}) = -2 \\log p(\\boldsymbol{y} \\mid \\boldsymbol{\\theta})\\) \\(\\boldsymbol{y} = \\{y_{ijk}\\}\\), \\(\\boldsymbol{\\theta}\\), \\(E(y_{ijk} \\mid \\boldsymbol{\\theta})\\), \\(\\log p(\\boldsymbol{y} \\mid \\boldsymbol{\\theta})\\) sequence read count data, parameters latent variables model, expected value data conditional \\(\\boldsymbol{\\theta}\\), log-likelihood model, respectively. Bayesian \\(p\\)-value estimated probability value discrepancy statistics replicated dataset extreme observed dataset. extreme Bayesian \\(p\\)-value may indicate inadequate model fit. See, e.g., Gelman et al. (2014), Kéry Royle (2016), Conn et al. (2018) details procedures posterior predictive checking. Computations can run parallel multiple CPU cores cores argument controls degree parallelization. default, cores available user's environment used.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"P. B. Conn, D. S. Johnson, P. J. Williams, S. R. Melin M. B. Hooten. (2018) guide Bayesian model checking ecologists. Ecological Monographs 88:526--542. https://doi.org/10.1002/ecm.1314 . Gelman, J. B. Carlin, H. S. Stern D. B. Dunson, . Vehtari D. B. Rubin (2013) Bayesian Data Analysis. 3rd edition. Chapman Hall/CRC. http://www.stat.columbia.edu/~gelman/book/ M. Kéry J. . Royle (2016) Applied Hierarchical Modeling Ecology --- Analysis Distribution, Abundance Species Richness R BUGS. Volume 1: Prelude Static Models. Academic Press. https://www.mbr-pwrc.usgs.gov/pubanalysis/keryroylebook/","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness-of-fit assessment of the fitted model. — gof","text":"","code":"if (FALSE) { # Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J),                     cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)))  # Fitting a null model fit <- occumb(data = data)  # Goodness-of-fit assessment gof_result <- gof(fit) gof_result$p_value  # print p-value }"},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditions for local assessment under certain budget and cost values. — list_cond_L","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"list_cond_L() constructs list possible local species diversity assessment conditions specified budget cost values.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"","code":"list_cond_L(budget, lambda1, lambda2, fit, K = NULL)"},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"budget numeric specifying amount budget. Use currency unit consistent lambda1 lambda2. lambda1 numeric specifying cost per sequence read high-throughput sequencing. Use currency unit consistent budget lambda2. lambda2 numeric specifying cost per replicate library preparation. Use currency unit consistent budget lambda1. fit occumbFit object. K optional vector manually specifying number replicates.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"data frame containing columns named budget, lambda1, lambda2, K, N.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_L.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditions for local assessment under certain budget and cost values. — list_cond_L","text":"function can generate data frame object given settings argument eval_util_L(); see Examples eval_util_L(). default, outputs list feasible combinations values number replicates per site K sequencing depth per replicate N, based given budget cost values number sites (identified reference fit object). resulting N can non-integer calculated simply assuming can obtain maximum value. want obtain list subset possible K values given budget cost values, use K argument provide vector desired K values.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"list_cond_R() constructs list possible regional species diversity assessment conditions specified budget cost values.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"","code":"list_cond_R(budget, lambda1, lambda2, lambda3, J = NULL, K = NULL)"},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"budget numeric specifying amount budget. Use currency unit consistent lambda1, lambda2, lambda3. lambda1 numeric specifying cost per sequence read high-throughput sequencing. Use currency unit consistent budget, lambda2, lambda3. lambda2 numeric specifying cost per replicate library preparation. Use currency unit consistent budget, lambda1, lambda3. lambda3 numeric specifying visiting cost per site. Use currency unit consistent budget, lambda1, lambda2. J optional vector manually specifying number sites K optional vector manually specifying number replicates. computational convenience, K values must ascending order.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"data frame containing columns named budget, lambda1, lambda2, , lambda3, J, K, N.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/list_cond_R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditions for regional assessment under certain budget and cost values. — list_cond_R","text":"function can generate data frame object given settings argument eval_util_R(); see Examples eval_util_R(). default, outputs list feasible combinations values number sites J, number replicates per site K, sequencing depth per replicate N, based given budget cost values. resulting N can non-integer calculated simply assuming can obtain maximum value. want obtain list subset possible values J K given budget cost values, use J /K arguments (fact, recommended relatively small number K values specified using K argument list conditions achievable moderate budget cost values can huge, rarely practical vast number replicates per site). given combination J K values feasible specified budget cost values, combination ignored excluded output.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/loglik.html","id":null,"dir":"Reference","previous_headings":"","what":"Pointwise log-likelihood of the fitted model. — loglik","title":"Pointwise log-likelihood of the fitted model. — loglik","text":"loglik() extracts pointwise log-likelihood matrix occumbFit object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/loglik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pointwise log-likelihood of the fitted model. — loglik","text":"","code":"loglik(fit)"},{"path":"https://fukayak.github.io/occumb/dev/reference/loglik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pointwise log-likelihood of the fitted model. — loglik","text":"fit occumbFit object.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/loglik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pointwise log-likelihood of the fitted model. — loglik","text":"three-dimensional array pointwise log-likelihood, first dimension represents number MCMC iterations per chain, second number chains, last number eDNA samples (.e., replicates).","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/loglik.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pointwise log-likelihood of the fitted model. — loglik","text":"pointwise log-likelihood log-likelihood data point evaluated posterior samples parameter values. can used obtain criteria model comparisons, including WAIC PSIS-LOO. can conveniently calculated applying functions loo package output loglik function: see Vehtari et al. (2017) documentation loo package details.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/loglik.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pointwise log-likelihood of the fitted model. — loglik","text":". Vehtari, . Gelman, J. Gabry (2017) Practical Bayesian model evaluation using leave-one-cross-validation WAIC. Statistics Computing, 27, 1413--1432. https://doi.org/10.1007/s11222-016-9696-4","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/loglik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pointwise log-likelihood of the fitted model. — loglik","text":"","code":"if (FALSE) { # Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J),                     cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)))  # Fitting a null model fit <- occumb(data = data)  # Extract log-likelihood ll <- loglik(fit)  # could be passed to loo() or waic() in the loo package }"},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":null,"dir":"Reference","previous_headings":"","what":"Model-fitting function. — occumb","title":"Model-fitting function. — occumb","text":"occumb() fits multispecies site-occupancy model eDNA metabarcoding (Fukaya et al. 2022) returns model-fit object containing posterior samples.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model-fitting function. — occumb","text":"","code":"occumb(   formula_phi = ~1,   formula_theta = ~1,   formula_psi = ~1,   formula_phi_shared = ~1,   formula_theta_shared = ~1,   formula_psi_shared = ~1,   prior_prec = 1e-04,   prior_ulim = 10000,   data,   n.chains = 4,   n.adapt = NULL,   n.burnin = 10000,   n.thin = 10,   n.iter = 20000,   parallel = FALSE,   ... )"},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model-fitting function. — occumb","text":"formula_phi right-hand side formula describing species-specific effects sequence relative dominance (\\(\\phi\\)). formula_theta right-hand side formula describing species-specific effects sequence capture probability (\\(\\theta\\)). formula_psi right-hand side formula describing species-specific effects occupancy probability (\\(\\psi\\)). formula_phi_shared right-hand side formula describing effects sequence relative dominance (\\(\\phi\\)) common across species. intercept term ignored (see Details). formula_theta_shared right-hand side formula describing effects sequence capture probability (\\(\\theta\\)) common across species. intercept term ignored (see Details). formula_psi_shared right-hand side formula describing effects occupancy probability (\\(\\psi\\)) common across species. intercept term ignored (see Details). prior_prec Precision normal prior distribution community-level average species-specific parameters effects common across species. prior_ulim Upper limit uniform prior distribution standard deviation species-specific parameters. data dataset supplied occumbData class object. n.chains Number Markov chains run. n.adapt Number iterations run JAGS adaptive phase. n.burnin Number iterations beginning chain discard. n.thin Thinning rate. Must positive integer. n.iter Total number iterations per chain (including burn-). parallel TRUE, run MCMC chains parallel multiple CPU cores. ... Additional arguments passed jags() function.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model-fitting function. — occumb","text":"S4 object occumbFit class containing results model fitting supplied dataset.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model-fitting function. — occumb","text":"occumb() allows fitting range multispecies site occupancy models including covariates different levels data generation process. general form model can written follows: Sequence read counts: $$(y_{1jk}, ..., y_{Ijk}) \\sim \\textrm{Multinomial}((\\pi_{1jk}, ...,  \\pi_{Ijk}), N_{jk}),$$ $$\\pi_{ijk} = \\frac{u_{ijk}r_{ijk}}{\\sum_m u_{mjk}r_{mjk}},$$ Relative frequency species sequences: $$r_{ijk} \\sim \\textrm{Gamma}(\\phi_{ijk}, 1),$$ Capture species sequences: $$u_{ijk} \\sim \\textrm{Bernoulli}(z_{ij}\\theta_{ijk}),$$ Site occupancy species: $$z_{ij} \\sim \\textrm{Bernoulli}(\\psi_{ij}),$$ variations \\(\\phi\\), \\(\\theta\\), \\(\\psi\\) modeled specifying model formulas formula_phi, formula_theta, formula_psi, formula_phi_shared, formula_theta_shared, formula_psi_shared. parameter may species-specific effects effects common across species, former specified formula_phi, formula_theta, formula_psi, formula_phi_shared, formula_theta_shared, formula_psi_shared specify latter. species-specific intercepts specified default, intercept term formula_phi_shared, formula_theta_shared, formula_psi_shared always ignored. covariate terms must found names list elements stored spec_cov, site_cov, repl_cov slots dataset object provided data argument. Covariates modeled using log link function \\(\\phi\\) logit link function \\(\\theta\\) \\(\\psi.\\) two arguments, prior_prec prior_ulim, control prior distribution parameters. community-level average species-specific effects effects common across species, normal prior distribution mean 0 precision (.e., inverse variance) prior_prec specified. standard deviation species-specific effects, uniform prior distribution lower limit 0 upper limit prior_ulim specified. correlation coefficient species-specific effects, uniform prior distribution range \\(-1\\) 1 specified default. data argument requires dataset object generated using ocumbData(): see document occumbData(). model fit via jags() function jagsUI package, Markov chain Monte Carlo methods used obtain posterior samples parameters latent variables. Arguments n.chains, n.adapt, n.burnin, n.thin, n.iter, parallel passed argument name jags() function. See document jagsUI's jags() function details.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model-fitting function. — occumb","text":"K. Fukaya, N. . Kondo, S. S. Matsuzaki T. Kadoya (2022) Multispecies site occupancy modelling study design spatially replicated environmental DNA metabarcoding. Methods Ecology Evolution 13:183--193. https://doi.org/10.1111/2041-210X.13732","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model-fitting function. — occumb","text":"","code":"# Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J),                     cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)))  if (FALSE) { # Fitting a null model (includes only species-specific intercepts) res0 <- occumb(data = data)  # Add species-specific effects of site covariates in occupancy probabilities res1 <- occumb(formula_psi = ~ cov2, data = data)        # Continuous covariate res2 <- occumb(formula_psi = ~ cov3, data = data)        # Categorical covariate res3 <- occumb(formula_psi = ~ cov2 * cov3, data = data) # Interaction  # Add species covariate in the three parameters # Note that species covariates are modeled as common effects res4 <- occumb(formula_phi_shared = ~ cov1, data = data)   # phi res5 <- occumb(formula_theta_shared = ~ cov1, data = data) # theta res6 <- occumb(formula_psi_shared = ~ cov1, data = data)   # psi  # Add replicate covariates # Note that replicate covariates can only be specified for theta and phi res7 <- occumb(formula_phi = ~ cov4, data = data)   # phi res8 <- occumb(formula_theta = ~ cov4, data = data) # theta  # Specify the prior distribution and MCMC settings explicitly res9 <- occumb(data = data, prior_prec = 1E-2, prior_ulim = 1E2,                n.chains = 1, n.burnin = 1000, n.thin = 1, n.iter = 2000) res10 <- occumb(data = data, parallel = TRUE) # Run MCMC in parallel }"},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for occumbData data class. — occumbData","title":"Constructor for occumbData data class. — occumbData","text":"occumbData() creates data list compatible model-fitting function occumb().","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for occumbData data class. — occumbData","text":"","code":"occumbData(y, spec_cov = NULL, site_cov = NULL, repl_cov = NULL)"},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for occumbData data class. — occumbData","text":"y 3-D array sequence read counts (integer values) may dimnames attribute. Dimensions ordered species, site, replicate. Data missing replicates must represented zero vectors. NAs allowed. spec_cov named list species covariates. element must vector numeric, factor, character whose length equal dim(y)[1] (.e., number species). Characters automatically converted factors. NAs allowed. site_cov named list site covariates. element must vector numeric, factor, character whose length equal dim(y)[2] (.e., number sites). Characters automatically converted factors. NAs allowed. repl_cov named list replicate covariates. element must matrix numeric, factor, character whose dimension equal dim(y)[2:3] (.e., number sites \\(\\times\\) number replicates). Characters automatically converted factors. NAs allowed.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for occumbData data class. — occumbData","text":"S4 object occumbData class.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for occumbData data class. — occumbData","text":"element names spec_cov, site_cov, repl_cov must unique. y dimnames attribute, retained resulting occumbData object can referenced subsequent analyses.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/occumbData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for occumbData data class. — occumbData","text":"","code":"# Generate the smallest random dataset (2 species * 2 sites * 2 reps) I <- 2 # Number of species J <- 2 # Number of sites K <- 2 # Number of replicates data <- occumbData(     y = array(sample.int(I * J * K), dim = c(I, J, K)),     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J), cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)) )  # A case for named y (with species and site names) y_named <- array(sample.int(I * J * K), dim = c(I, J, K)) dimnames(y_named) <- list(c(\"common species\", \"uncommon species\"),                           c(\"good site\", \"bad site\"), NULL) data_named <- occumbData(     y = y_named,     spec_cov = list(cov1 = rnorm(I)),     site_cov = list(cov2 = rnorm(J), cov3 = factor(1:J)),     repl_cov = list(cov4 = matrix(rnorm(J * K), J, K)) )  # A real data example data(fish_raw) fish <- occumbData(     y = fish_raw$y,     spec_cov = list(mismatch = fish_raw$mismatch),     site_cov = list(riverbank = fish_raw$riverbank) )  # Get an overview of the datasets if (FALSE) { summary(data) summary(data_named) summary(fish) }"},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbFit-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for occumbFit class. — plot,occumbFit-method","title":"Plot method for occumbFit class. — plot,occumbFit-method","text":"Plot method occumbFit class.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbFit-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for occumbFit class. — plot,occumbFit-method","text":"","code":"# S4 method for occumbFit plot(x, y, ...)"},{"path":"https://fukayak.github.io/occumb/dev/reference/plot-occumbFit-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for occumbFit class. — plot,occumbFit-method","text":"x occumbFit object. y used. ... arguments passed plot method jagsUI class.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/print-occumbFit-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for occumbFit class. — print,occumbFit-method","title":"Print method for occumbFit class. — print,occumbFit-method","text":"Print method occumbFit class.","code":""},{"path":"https://fukayak.github.io/occumb/dev/reference/print-occumbFit-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for occumbFit class. — print,occumbFit-method","text":"","code":"# S4 method for occumbFit print(x, ...)"},{"path":"https://fukayak.github.io/occumb/dev/reference/print-occumbFit-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for occumbFit class. — print,occumbFit-method","text":"x occumbFit object. ... arguments passed print method jagsUI class.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-development-version","dir":"Changelog","previous_headings":"","what":"occumb (development version)","title":"occumb (development version)","text":"Add fish fish_raw data. Add summary method occumbData class.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-051-20230427","dir":"Changelog","previous_headings":"","what":"occumb 0.5.1 (2023/04/27)","title":"occumb 0.5.1 (2023/04/27)","text":"Add pkgdown website. bug fixes internal changes.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-050-20230426","dir":"Changelog","previous_headings":"","what":"occumb 0.5.0 (2023/04/26)","title":"occumb 0.5.0 (2023/04/26)","text":"Add get_post_samples() get_post_summary() functions. Add option parallel computation gof() function. Fix bugs occumb() functions. Fix issue parall computation eval_util_L() eval_util_R() functions Windows.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-042-20221213","dir":"Changelog","previous_headings":"","what":"occumb 0.4.2 (2022/12/13)","title":"occumb 0.4.2 (2022/12/13)","text":"Fix issue parallel computation eval_util_L() eval_util_R() functions Windows.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-041-20221116","dir":"Changelog","previous_headings":"","what":"occumb 0.4.1 (2022/11/16)","title":"occumb 0.4.1 (2022/11/16)","text":"Fix computational issues eval_util_L() eval_util_R() functions.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-040-20220603","dir":"Changelog","previous_headings":"","what":"occumb 0.4.0 (2022/06/03)","title":"occumb 0.4.0 (2022/06/03)","text":"Add eval_util_L() eval_util_R() functions. Add list_cond_L() list_cond_R() functions.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-030-20220331","dir":"Changelog","previous_headings":"","what":"occumb 0.3.0 (2022/03/31)","title":"occumb 0.3.0 (2022/03/31)","text":"Add gof() function. Add loglik() function. Add ... argument occumb() function. Add data field occumbFit class.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-v021-20211121","dir":"Changelog","previous_headings":"","what":"occumb v0.2.1 (2021/11/21)","title":"occumb v0.2.1 (2021/11/21)","text":"bug fixes. Add validations inputs occumb().","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-v020-20211119","dir":"Changelog","previous_headings":"","what":"occumb v0.2.0 (2021/11/19)","title":"occumb v0.2.0 (2021/11/19)","text":"Change occumbData class specification occumbData() function. Add occumb() function. Add methods occumbFit class: plot, print, summary.","code":""},{"path":"https://fukayak.github.io/occumb/dev/news/index.html","id":"occumb-v010-2021910","dir":"Changelog","previous_headings":"","what":"occumb v0.1.0 (2021/9/10)","title":"occumb v0.1.0 (2021/9/10)","text":"Initial development occumb package. Add occumbData() function.","code":""}]
